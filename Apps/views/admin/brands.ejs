<!DOCTYPE HTML>
<html lang="en">
  <%- include('partials/head') %>
<body>
  <div class="screen-overlay"></div>
  <aside class="navbar-aside" id="offcanvas_aside">
    <div class="aside-top">
      <a href="" class="brand-wrap">
        <img src="/backend/imgs/logos/cyclonelogo.png" class="logo" alt="CycloneX Dashboard">
      </a>
      <div>
        <button class="btn btn-icon btn-aside-minimize">
          <i class="text-muted material-icons md-menu_open"></i>
        </button>
      </div>
    </div>
    <nav>
      <ul class="menu-aside">
        <li class="menu-item ">
          <a class="menu-link" href="/admin/dashboard">
            <i class="icon material-icons md-home"></i>
            <span class="text">Dashboard</span>
          </a>
        </li>
        <li class="menu-item ">
          <a class="menu-link" href="/admin/product-list2">
            <i class="icon material-icons md-shopping_bag"></i>
            <span class="text">Products</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/category">
            <i class="icon material-icons md-category"></i>
            <span class="text">Category</span>
          </a>
        </li>
        <li class="menu-item active">
          <a class="menu-link" href="/admin/brands">
            <i class="icon material-icons md-stars"></i>
            <span class="text">Brands</span>
          </a>
        </li>
        <li class="menu-item  ">
          <a class="menu-link" href="/admin/userlist">
            <i class="icon material-icons md-store"></i>
            <span class="text">Users</span>
            <!-- <i class="icon-expand material-icons md-expand_more"></i> -->
          </a>
         
        </li>
      </ul>
     
      </ul>
      <br><br>
    </nav>
  </aside>
  <main class="main-wrap">
    <%- include('partials/header') %>
    <section class="content-main">
      <div class="content-header">
        <div>
          <h2 class="content-title card-title text-4xl">Brands</h2>
        </div>
        <div class="flex flex-col sm:flex-row items-center sm:space-x-4 mb-4">
          <!-- Search Input -->
          <input 
              type="text" 
              id="searchInput" 
              placeholder="Search Brands" 
              class="bg-white px-3 py-2 border rounded-md w-full sm:max-w-xs"
          />
          <!-- Search Button -->
          <button 
            id="searchBtn" 
            class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Search
          </button>
          <!-- Clear Button -->
          <button 
            id="clearBtn" 
            class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Clear
          </button>
        
     
      

          <!-- Status Filter Dropdown -->
          <select id="statusFilter" class="bg-white px-3 py-2 border rounded-md">
              <option value="">All</option>
              <option value="active">Active</option>
              <option value="deactive">Deactivated</option>
          </select>
        </div>
      </div>
      <!-- Card Container with max width adjusted -->
      <div class="bg-white shadow-sm rounded-lg overflow-hidden max-w-6xl mx-auto">
        <div class="p-6">
          <!-- Grid layout: Form on left, Brands Table on right -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <!-- Add Brand Form -->
            <div class="col-span-1">
              <form id="addBrandForm" enctype="multipart/form-data" class="space-y-4">
                <div>
                  <label for="brand_name" class="block text-sm font-medium text-gray-700">Name</label>
                  <input
                    type="text"
                    name="name"
                    placeholder="Type here"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="brand_name"
                  />
                  <!-- Inline error for name -->
                  <p id="brand_name_error" class="text-red-500 text-sm hidden"></p>
                </div>
                <div>
                  <label for="brand_description" class="block text-sm font-medium text-gray-700">Description</label>
                  <textarea
                    name="description"
                    placeholder="Type here"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="brand_description"
                  ></textarea>
                  <!-- Inline error for description -->
                  <p id="brand_description_error" class="text-red-500 text-sm hidden"></p>
                </div>
                <!-- Removed the Image input field -->
                <div>
                  <button
                    type="submit"
                    class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    Create Brand
                  </button>
                </div>
              </form>
            </div>

            <!-- Brands Table -->
            <div class="col-span-3">
              <div class="overflow-x-auto">
                <table class="min-w-full bg-white border border-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Name</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Description</th>
                      <th class="p-3 text-right text-sm font-semibold text-gray-700">Action</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Status</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Listing</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if(brands && brands.length > 0){ %>
                    <% brands.forEach(brand => { %>
                      <tr class="border-b border-gray-200 hover:bg-gray-50">
                        <td class="p-3 text-sm text-gray-700"><b><%= brand.name %></b></td>
                        <td class="p-3 text-sm text-gray-700"><%= brand.description %></td>
                        <td class="p-3 text-right">
                          <a
                            href="/admin/editbrand/<%= brand._id %>"
                            class="text-blue-500 hover:text-blue-700"
                            data-id="<%= brand._id %>"
                            data-name="<%= brand.name %>"
                            data-description="<%= brand.description %>"
                          >
                            <i class="fas fa-pencil-alt" style="font-size: 1.2rem;"></i>
                          </a>
                        </td>
                        <td class="p-3">
                          <% if (brand.isBlocked) { %>
                            <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full bg-red-100 text-red-800">
                              Deactivated
                            </span>
                          <% } else { %>
                            <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full bg-green-100 text-green-800">
                              Active
                            </span>
                          <% } %>
                        </td>
                        <td class="p-3">
                          <!-- Tailwind Toggle Switch -->
                          <label class="relative inline-flex items-center cursor-pointer">
                            <input 
                              type="checkbox" 
                              data-id="<%= brand._id %>" 
                              class="sr-only peer toggle-checkbox" 
                              <%= brand.isBlocked ? '' : 'checked' %>
                            />
                            <div class="w-11 h-6 rounded-full bg-red-200 
                                        peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 
                                        dark:peer-focus:ring-red-800
                                        peer-checked:bg-green-600 relative
                                        after:absolute after:top-0.5 after:left-[2px] after:bg-white 
                                        after:border-gray-300 after:border after:rounded-full 
                                        after:h-5 after:w-5 after:transition-all 
                                        peer-checked:after:translate-x-full peer-checked:after:border-white">
                            </div>
                          </label>
                        </td>
                      </tr>
                    <% }) %>
                    <% } else { %>
                      <tr>
                        <td colspan="6" class="text-center p-3">No brands found</td>
                      </tr>
                  <% } %>
                  </tbody>
                </table>
                <div class="pagination-area mt-15 mb-50">
                  <nav aria-label="Page navigation">
                      <ul class="pagination flex flex-wrap items-center justify-center gap-2">
                          <!-- Previous Button -->
                          <% if (currentPage > 1) { %>
                              <li class="page-item">
                                  <a class="page-link flex items-center justify-center w-10 h-10 rounded-full bg-white border border-gray-300 text-gray-600 hover:bg-blue-50 hover:border-blue-500 hover:text-blue-600 transition-all duration-300 shadow-sm" href="?page=<%= prevPage %>&limit=4">
                                      &laquo;
                                  </a>
                              </li>
                          <% } %>
              
                          <!-- Page Numbers -->
                          <% for (let i = 1; i <= totalPages; i++) { %>
                              <li class="page-item">
                                  <a class="page-link flex items-center justify-center w-10 h-10 rounded-full bg-white border border-gray-300 text-gray-600 hover:bg-blue-50 hover:border-blue-500 hover:text-blue-600 transition-all duration-300 shadow-sm <%= i === currentPage ? 'bg-blue-500 border-blue-500 text-white hover:bg-blue-600 hover:border-blue-600' : '' %>" href="?page=<%= i %>&limit=3">
                                      <%= i %>
                                  </a>
                              </li>
                          <% } %>
              
                          <!-- Next Button -->
                          <% if (currentPage < totalPages) { %>
                              <li class="page-item">
                                  <a class="page-link flex items-center justify-center w-10 h-10 rounded-full bg-white border border-gray-300 text-gray-600 hover:bg-blue-50 hover:border-blue-500 hover:text-blue-600 transition-all duration-300 shadow-sm" href="?page=<%= nextPage %>&limit=3">
                                      &raquo;
                                  </a>
                              </li>
                          <% } %>
                      </ul>
                  </nav>
              </div>
              </div>
            </div>
          </div>
        </div>
      </div><!-- End card -->
    </section> <!-- content-main end// -->
    <%- include('partials/footer') %>
  </main>

  <!-- Include SweetAlert2 script from CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <%- include('partials/scripts') %>
  <script>
    // Create a SweetAlert mixin configured as a toast at the top right corner
    const Toast = Swal.mixin({
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true,
      customClass: {
        popup: 'bg-white p-2 rounded shadow-md text-sm',
        confirmButton: 'bg-blue-600 text-white px-2 py-1 rounded text-sm'
      },
      buttonsStyling: false,
    });
  
    document.getElementById('addBrandForm').addEventListener('submit', async function (e) {
      e.preventDefault(); // Prevent default form submission
      
      // Clear any previous inline errors
      document.getElementById('brand_name_error').classList.add('hidden');
      document.getElementById('brand_description_error').classList.add('hidden');
      
      // Retrieve form field values
      const nameField = document.getElementById('brand_name');
      const descriptionField = document.getElementById('brand_description');
      const name = nameField.value.trim();
      const description = descriptionField.value.trim();
      
      let hasError = false;
      
      // Validate the "Name" field is not empty
      if (!name) {
        const nameError = document.getElementById('brand_name_error');
        nameError.textContent = 'Brand name is required';
        nameError.classList.remove('hidden');
        hasError = true;
      } else if (!/[A-Z]/.test(name)) {
        // Validate that the brand name contains at least one uppercase letter
        const nameError = document.getElementById('brand_name_error');
        nameError.textContent = 'Brand name must contain at least one uppercase letter';
        nameError.classList.remove('hidden');
        hasError = true;
      }
      
      // Validate the "Description" field
      if (!description) {
        const descriptionError = document.getElementById('brand_description_error');
        descriptionError.textContent = 'Brand description is required';
        descriptionError.classList.remove('hidden');
        hasError = true;
      } else if (description.length < 10) {
        const descriptionError = document.getElementById('brand_description_error');
        descriptionError.textContent = 'Brand description must be at least 10 characters long';
        descriptionError.classList.remove('hidden');
        hasError = true;
      }
      
      // If there are validation errors, show a toast alert and abort submission
      if (hasError) {
        Toast.fire({
          icon: 'error',
          title: 'Please fix the errors in the form.'
        });
        return;
      }
      
      // Create FormData from the form
      const formData = new FormData(this);
      try {
        const response = await fetch('/admin/addbrand', {
          method: 'POST',
          body: formData
        });
        const data = await response.json();
        if (response.ok && data.success) {
          Toast.fire({
            icon: 'success',
            title: data.message,
          }).then(() => {
            location.reload();
          });
        } else {
          Toast.fire({
            icon: 'error',
            title: data.message || 'An error occurred'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Toast.fire({
          icon: 'error',
          title: 'An error occurred. Please try again.'
        });
      }
    });
  
    // (Toggle and search code remains unchanged below)
    // Toggle Brand Status
  // Toggle Brand Status
document.querySelectorAll('.toggle-checkbox').forEach(switchElement => {
  switchElement.addEventListener('change', async function(e) {
    // Prevent the default toggle action initially
    e.preventDefault();
    
    const brandId = this.getAttribute('data-id');
    const newStatus = !this.checked; // Inverse because we prevented default
    
    if (!brandId) {
      console.error('Brand ID not found');
      return;
    }

    // Show confirmation dialog
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to ${newStatus ? 'activate' : 'deactivate'} this brand?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, update it!'
    });

    // If user confirms
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/brand/listing/${brandId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: newStatus })
        });

        if (!response.ok) {
          throw new Error('Failed to update status');
        }

        // Show success toast
        Toast.fire({
          icon: 'success',
          title: 'Brand status has been updated.',
          timer: 2000
        });

        // Update the toggle and reload after toast
        this.checked = newStatus;
        setTimeout(() => {
          window.location.reload();
        }, 2000);

      } catch (error) {
        // Show error toast
        Toast.fire({
          icon: 'error',
          title: 'Failed to update brand status.'
        });
        this.checked = !newStatus; // Revert toggle if failed
      }
    } else {
      // If user cancels, revert the checkbox
      this.checked = !newStatus;
    }
  });
});
    
    // Search functionality for Brands with cancel button
    document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('searchInput');
  const searchBtn = document.getElementById("searchBtn");
  const clearBtn = document.getElementById("clearBtn");
  const statusFilter = document.getElementById("statusFilter");

  searchBtn.addEventListener("click", applyFilters);
  clearBtn.addEventListener("click", clearFilters);
  statusFilter.addEventListener('change', applyFilters);

  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      applyFilters();
    }
  });

  function applyFilters() {
    const queryParams = new URLSearchParams();

    const search = searchInput.value.trim();
    const status = statusFilter.value;

    if (search) queryParams.append("search", search);
    if (status) queryParams.append("statusFilter", status);

    // Corrected typo: using 'window' instead of 'indow'
    window.location.href = `/admin/brands?${queryParams.toString()}`;
  }

  function clearFilters() {
    searchInput.value = "";
    statusFilter.value = "";
    applyFilters();
  }

  function restoreFiltersFromURL() {
    const params = new URLSearchParams(window.location.search);
    searchInput.value = params.get("search") || "";
    statusFilter.value = params.get("statusFilter") || "";
  }

  restoreFiltersFromURL();
});

  </script>
  
  
</body>
</html>
