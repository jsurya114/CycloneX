<!DOCTYPE HTML>
<html lang="en">
  <%- include('partials/head') %>
<body>
  <div class="screen-overlay"></div>
  <aside class="navbar-aside" id="offcanvas_aside">
    <div class="aside-top">
      <a href="" class="brand-wrap">
        <img src="/backend/imgs/logos/cyclonelogo.png" class="logo" alt="CycloneX Dashboard">
      </a>
      <div>
        <button class="btn btn-icon btn-aside-minimize">
          <i class="text-muted material-icons md-menu_open"></i>
        </button>
      </div>
    </div>
    <nav>
      <ul class="menu-aside">
        <li class="menu-item ">
          <a class="menu-link" href="/admin/dashboard">
            <i class="icon material-icons md-home"></i>
            <span class="text">Dashboard</span>
          </a>
        </li>
        <li class="menu-item ">
          <a class="menu-link" href="/admin/product-list2">
            <i class="icon material-icons md-shopping_bag"></i>
            <span class="text">Products</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/category">
            <i class="icon material-icons md-category"></i>
            <span class="text">Category</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/brands">
            <i class="icon material-icons md-stars"></i>
            <span class="text">Brands</span>
          </a>
        </li>
        <li class="menu-item active">
          <a class="menu-link" href="/admin/coupons">
            <i class="icon material-icons md-card_giftcard"></i>
            <span class="text">Coupons</span>
          </a>
        </li>
        <li class="menu-item  ">
          <a class="menu-link" href="/admin/userlist">
            <i class="icon material-icons md-store"></i>
            <span class="text">Users</span>
          </a>
        </li>
        <li class="menu-item ">
          <a class="menu-link" href="/admin/orderlist">
            <i class="icon material-icons md-shopping_bag"></i>
            <span class="text">Orders</span>
          </a>
        </li>
      </ul>
      <br><br>
    </nav>
  </aside>
  <main class="main-wrap">
    <%- include('partials/header') %>
    <section class="content-main">
      <div class="content-header">
        <div>
          <h2 class="content-title card-title text-4xl">Coupons</h2>
        </div>
        <div class="flex flex-col sm:flex-row items-center sm:space-x-4 mb-4">
          <!-- Search Input -->
          <input 
              type="text" 
              id="searchInput" 
              placeholder="Search Coupons" 
              class="bg-white px-3 py-2 border rounded-md w-full sm:max-w-xs"
          />
          <!-- Search Button -->
          <button 
            id="searchBtn" 
            class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Search
          </button>
          <!-- Clear Button -->
          <button 
            id="clearBtn" 
            class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Clear
          </button>
          <!-- Status Filter Dropdown -->
          <select id="statusFilter" class="bg-white px-3 py-2 border rounded-md">
              <option value="">All</option>
              <option value="active">Active</option>
              <option value="deactive">Expired</option>
          </select>
        </div>
      </div>
      <!-- Card Container with max width adjusted -->
      <div class="bg-white shadow-sm rounded-lg overflow-hidden max-w-7xl mx-auto">
        <div class="p-6">
          <!-- Grid layout: Form on left, Coupons Table on right -->
          <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <!-- Add Coupon Form -->
            <div class="col-span-1">
              <form id="addCouponForm"  class="space-y-4">
                <div>
                  <label for="couponCode" class="block text-sm font-medium text-gray-700">Coupon Code</label>
                  <input
                    type="text"
                    name="couponCode"
                    placeholder="e.g. SUMMER20"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="couponCode"
                  />
                  <p id="couponCode_error" class="text-red-500 text-sm hidden"></p>
                </div>
                
                <div>
                  <label for="startDate" class="block text-sm font-medium text-gray-700">Start Date</label>
                  <input
                    type="date"
                    name="startDate"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="startDate"
                  />
                  <p id="startDate_error" class="text-red-500 text-sm hidden"></p>
                </div>
                
               
                
                <div>
                  <label for="expireDate" class="block text-sm font-medium text-gray-700">Expiry Date</label>
                  <input
                    type="date"
                    name="expireDate"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="expireDate"
                  />
                  <p id="expireDate_error" class="text-red-500 text-sm hidden"></p>
                </div>
                
                <div>
                  <label for="offerPrice" class="block text-sm font-medium text-gray-700">Offer Price</label>
                  <input
                    type="number"
                    name="offerPrice"
                    placeholder="e.g. 100"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="offerPrice"
                  />
                  <p id="offerPrice_error" class="text-red-500 text-sm hidden"></p>
                </div>
                
                <div>
                  <label for="minAmount" class="block text-sm font-medium text-gray-700">Minimum Amount</label>
                  <input
                    type="number"
                    name="minAmount"
                    placeholder="e.g. 500"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    id="minAmount"
                  />
                  <p id="minAmount_error" class="text-red-500 text-sm hidden"></p>
                </div>
                
                <div>
                  <button
                    type="submit"
                    class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    Create Coupon
                  </button>
                </div>
              </form>
            </div>

            <!-- Coupons Table -->
            <div class="col-span-3">
              <div class="overflow-x-auto">
                <table class="min-w-full bg-white border border-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Code</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Start Date</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Min. Amount</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Expires</th>
                      <th class="p-3 text-left text-sm font-semibold text-gray-700">Status</th>
                      <th class="p-3 text-center text-sm font-semibold text-gray-700">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if(coupons && coupons.length > 0){ %>
                    <% coupons.forEach(coupon => { %>
                      <tr class="border-b border-gray-200 hover:bg-gray-50">
                        <td class="p-3 text-sm text-gray-700"><b><%= coupon.couponCode %></b></td>
                        <td class="p-3 text-sm text-gray-700">
                          <%= new Date(coupon.startDate).toLocaleDateString() %>
                        </td>
                      
                        <td class="p-3 text-sm text-gray-700">$<%= coupon.minAmount %></td>
                        <td class="p-3 text-sm text-gray-700">
                          <%= new Date(coupon.expireDate).toLocaleDateString() %>
                        </td>
                        <td class="p-3">
                          <% if (coupon.isBlocked) { %>
                            <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full bg-red-100 text-red-800">
                              Deactive
                            </span>
                          <% } else { %>
                            <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full bg-green-100 text-green-800">
                              Active
                            </span>
                          <% } %>
                        </td>
                        <td class="p-3 text-center">
                          <div class="flex justify-center space-x-2">
                            <!-- Edit Button -->
                            <a
                              href="/admin/editcoupon/<%= coupon._id %>"
                              class="text-blue-500 hover:text-blue-700"
                              data-id="<%= coupon._id %>"
                            >
                              <i class="fas fa-pencil-alt" style="font-size: 1.2rem;"></i>
                            </a>
                            
                            <!-- Toggle Switch -->
                            <label class="relative inline-flex items-center cursor-pointer">
                              <input 
                                type="checkbox" 
                                data-id="<%= coupon._id %>" 
                                class="sr-only peer toggle-checkbox" 
                                <%= coupon.isBlocked ? '' : 'checked' %>
                              />
                              <div class="w-11 h-6 rounded-full bg-red-200 
                                          peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 
                                          dark:peer-focus:ring-red-800
                                          peer-checked:bg-green-600 relative
                                          after:absolute after:top-0.5 after:left-[2px] after:bg-white 
                                          after:border-gray-300 after:border after:rounded-full 
                                          after:h-5 after:w-5 after:transition-all 
                                          peer-checked:after:translate-x-full peer-checked:after:border-white">
                              </div>
                            </label>
                          </div>
                        </td>
                      </tr>
                    <% }) %>
                    <% } else { %>
                      <tr>
                        <td colspan="7" class="text-center p-3">No coupons found</td>
                      </tr>
                    <% } %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div><!-- End card -->
    </section> <!-- content-main end// -->
    <%- include('partials/footer') %>
  </main>

  <!-- Include SweetAlert2 script from CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <%- include('partials/scripts') %>
  <script>
    // Create a SweetAlert mixin configured as a toast at the top right corner
    // Create a SweetAlert mixin configured as a toast at the top right corner
const Toast = Swal.mixin({
  toast: true,
  position: 'top-end',
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  customClass: {
    popup: 'bg-white p-2 rounded shadow-md text-sm',
    confirmButton: 'bg-blue-600 text-white px-2 py-1 rounded text-sm'
  },
  buttonsStyling: false,
});

document.getElementById('addCouponForm').addEventListener('submit', async function (e) {
  e.preventDefault(); // Prevent default form submission
  
  // Clear any previous inline errors
  document.querySelectorAll('[id$="_error"]').forEach(el => el.classList.add('hidden'));
  
  // Retrieve form field values
  const couponCode = document.getElementById('couponCode').value.trim();
  const startDate = document.getElementById('startDate').value.trim();
  const expireDate = document.getElementById('expireDate').value.trim();
  const offerPrice = document.getElementById('offerPrice').value.trim();
  const minAmount = document.getElementById('minAmount').value.trim();
  
  let hasError = false;
  
  // Validate coupon code
  if (!couponCode) {
    document.getElementById('couponCode_error').textContent = 'Coupon code is required';
    document.getElementById('couponCode_error').classList.remove('hidden');
    hasError = true;
  } else if (!/[A-Z]/.test(couponCode)) {
    document.getElementById('couponCode_error').textContent = 'Coupon code must contain at least one uppercase letter';
    document.getElementById('couponCode_error').classList.remove('hidden');
    hasError = true;
  }
  
  // Validate start date
  if (!startDate) {
    document.getElementById('startDate_error').textContent = 'Start date is required';
    document.getElementById('startDate_error').classList.remove('hidden');
    hasError = true;
  }
  
  // Validate expiry date
  if (!expireDate) {
    document.getElementById('expireDate_error').textContent = 'Expiry date is required';
    document.getElementById('expireDate_error').classList.remove('hidden');
    hasError = true;
  } else {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expiryDate = new Date(expireDate);
    if (expiryDate <= today) {
      document.getElementById('expireDate_error').textContent = 'Expiry date must be in the future';
      document.getElementById('expireDate_error').classList.remove('hidden');
      hasError = true;
    }
    
    // Check if expiry date is after start date
    if (new Date(expireDate) <= new Date(startDate)) {
      document.getElementById('expireDate_error').textContent = 'Expiry date should be after start date';
      document.getElementById('expireDate_error').classList.remove('hidden');
      hasError = true;
    }
  }
  
  // Validate offer price
  if (!offerPrice) {
    document.getElementById('offerPrice_error').textContent = 'Offer price is required';
    document.getElementById('offerPrice_error').classList.remove('hidden');
    hasError = true;
  } else if (isNaN(offerPrice) || parseFloat(offerPrice) <= 0) {
    document.getElementById('offerPrice_error').textContent = 'Offer price must be a positive number';
    document.getElementById('offerPrice_error').classList.remove('hidden');
    hasError = true;
  }
  
  // Validate minimum amount
  if (!minAmount) {
    document.getElementById('minAmount_error').textContent = 'Minimum amount is required';
    document.getElementById('minAmount_error').classList.remove('hidden');
    hasError = true;
  } else if (isNaN(minAmount) || parseFloat(minAmount) <= 0) {
    document.getElementById('minAmount_error').textContent = 'Minimum amount must be a positive number';
    document.getElementById('minAmount_error').classList.remove('hidden');
    hasError = true;
  }
  
  // If there are validation errors, show a toast alert and abort submission
  if (hasError) {
    Toast.fire({
      icon: 'error',
      title: 'Please fix the errors in the form.'
    });
    return;
  }
  


 

  try {

    const formData = {
      couponCode: document.getElementById('couponCode').value.trim(),
      startDate: document.getElementById('startDate').value.trim(),
      expireDate: document.getElementById('expireDate').value.trim(),
      offerPrice: document.getElementById('offerPrice').value.trim(),
      minAmount: document.getElementById('minAmount').value.trim()
    };
    const response = await fetch('/admin/addcoupon', {
      method: 'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify(formData)
    });
    const data = await response.json();
    if (response.ok && data.success) {
      Toast.fire({
        icon: 'success',
        title: data.message,
      }).then(() => {
        location.reload();
      });
    } else {
      Toast.fire({
        icon: 'error',
        title: data.message || 'An error occurred'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Toast.fire({
      icon: 'error',
      title: 'An error occurred. Please try again.'
    });
  }
});

// Toggle Coupon Status
document.querySelectorAll('.toggle-checkbox').forEach(switchElement => {
  switchElement.addEventListener('change', async function (e) {
    e.preventDefault();

    const couponId = this.getAttribute('data-id');
    const newStatus = !this.checked; // Use directly, don't invert

    if (!couponId) {
      console.error('Coupon ID not found');
      return;
    }

    // Show confirmation dialog
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to ${newStatus ? 'deactivate ' : 'activate'} this coupon?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, update it!',
      cancelButtonText: 'Cancel'
    });

    if (!result.isConfirmed) {
      this.checked = !newStatus; // Revert if canceled
      return;
    }

    try {
      const response = await fetch(`/admin/listcoupon/${couponId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isBlocked: newStatus }) // Send correct key
      });

      const data = await response.json();
if(!response.ok){
throw new Error('Failed to update status')
}
Toast.fire({
  icon: 'success',
          title: 'coupon status has been updated.',
          timer: 2000
})

this.checked = newStatus;
        setTimeout(() => {
          window.location.reload();
        }, 2000)
    } catch (error) {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'error',
        title: error.message || 'An error occurred. Please try again.',
        showConfirmButton: false,
        timer: 3000
      });

      this.checked = !newStatus; // Revert toggle on failure
    }
  });
});

// Search functionality for Coupons
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('searchInput');
  const searchBtn = document.getElementById("searchBtn");
  const clearBtn = document.getElementById("clearBtn");
  const statusFilter = document.getElementById("statusFilter");

  searchBtn.addEventListener("click", applyFilters);
  clearBtn.addEventListener("click", clearFilters);
  statusFilter.addEventListener('change', applyFilters);

  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      applyFilters();
    }
  });

  function applyFilters() {
    const queryParams = new URLSearchParams();

    const search = searchInput.value.trim();
    const status = statusFilter.value;

    if (search) queryParams.append("search", search);
    if (status) queryParams.append("statusFilter", status);

    window.location.href = `/admin/coupons?${queryParams.toString()}`;
  }

  function clearFilters() {
    searchInput.value = "";
    statusFilter.value = "";
    applyFilters();
  }

  function restoreFiltersFromURL() {
    const params = new URLSearchParams(window.location.search);
    searchInput.value = params.get("search") || "";
    statusFilter.value = params.get("statusFilter") || "";
  }

  restoreFiltersFromURL();

  // Set minimum date for date fields
  const today = new Date().toISOString().split('T')[0];
  
  // Set minimum date for start date to today
  const startDateInput = document.getElementById('startDate');
  startDateInput.setAttribute('min', today);
  
  // Set default value for start date to today
  startDateInput.value = today;
  
  // Update expiry date constraints when start date changes
  startDateInput.addEventListener('change', function() {
    const expireDateInput = document.getElementById('expireDate');
    expireDateInput.setAttribute('min', this.value);
    
    // If expiry date is before or equal to start date, set it to the day after start date
    if (new Date(expireDateInput.value) <= new Date(this.value)) {
      const nextDay = new Date(this.value);
      nextDay.setDate(nextDay.getDate() + 1);
      expireDateInput.value = nextDay.toISOString().split('T')[0];
    }
  });
  
  // Set minimum date for expiry date
  const expireDateInput = document.getElementById('expireDate');
  expireDateInput.setAttribute('min', today);
});
  </script>
</body>
</html>