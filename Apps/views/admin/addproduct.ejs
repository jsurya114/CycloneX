<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head') %>
  <!-- Add CropperJS CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
</head>
<body class="bg-gray-100">
  <div class="min-h-screen flex flex-col">
    <aside class="navbar-aside" id="offcanvas_aside">
      <div class="aside-top">
          <a href="" class="brand-wrap">
              <img src="/backend/imgs/logos/cyclonelogo.png" class="logo" alt="CycloneX Dashboard">
          </a>
          <div>
              <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
          </div>
      </div>
      <nav>
          <ul class="menu-aside">
              <li class="menu-item active">
                  <a class="menu-link" href="/admin/dashboard"> <i class="icon material-icons md-home"></i>
                      <span class="text">Dashboard</span>
                  </a>
              </li>
              <li class="menu-item">
                  <a class="menu-link " href="/admin/product-list2"> <i class="icon material-icons md-shopping_bag"></i>
                      <span class="text">Products</span>
                  </a>
              </li>
              <li class="menu-item">
                  <a class="menu-link" href="/admin/category">  <i class="icon material-icons md-category"></i>
                      <span class="text">category</span>
                  </a>
              </li>
              <li class="menu-item">
                  <a class="menu-link" href="/admin/brands"> <i class="icon material-icons md-stars"></i>
                      <span class="text">Brands</span> </a>
              </li>
              <li class="menu-item ">
                  <a class="menu-link" href="/admin/userlist">
                    <i class="icon material-icons md-store"></i>
                    <span class="text">Users</span>
                  </a>
                </li>
          </ul>
          <br>
          <br>
      </nav>
  </aside>
    <main class="flex-1 p-6">
      <%- include('partials/header') %>
      <div class="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-6">
        <% if (typeof success !== 'undefined' && success) { %>
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Success!</strong>
            <span class="block sm:inline">Product added successfully.</span>
          </div>
        <% } %>

        <h2 class="text-2xl font-bold text-gray-800 mb-6">Add New Product</h2>
        
        <form action="/admin/addproduct" method="POST" enctype="multipart/form-data" class="space-y-4" id="addProductForm">
            <!-- Product Name -->
            <div>
              <label class="block text-gray-700 font-semibold">Product Name</label>
              <input type="text" name="productName" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <span id="error-productName" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Description -->
            <div>
              <label class="block text-gray-700 font-semibold">Description</label>
              <textarea name="description" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
              <span id="error-description" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Price -->
            <div>
              <label class="block text-gray-700 font-semibold">Price (â‚¹)</label>
              <input type="number" name="price" step="0.01" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <span id="error-price" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Category Selection -->
            <div>
              <label class="block text-gray-700 font-semibold">Category</label>
              <select name="category" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                <option value="">Select Category</option>
                <% category.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }) %>
              </select>
              <span id="error-category" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Brand Selection -->
            <div>
              <label class="block text-gray-700 font-semibold">Brand</label>
              <select name="brands" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                <option value="">Select Brand</option>
                <% brands.forEach(brand => { %>
                  <option value="<%= brand._id %>"><%= brand.name %></option>
                <% }) %>
              </select>
              <span id="error-brands" class="text-red-500 text-sm"></span>
            </div>
            
            <div>
              <label class="block text-gray-700 font-semibold">Stock</label>
              <input type="number" name="stock" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <span id="error-stock" class="text-red-500 text-sm"></span>
            </div>

            <!-- Main Image (without cropping) -->
            <div>
              <label class="block text-gray-700 font-semibold">Main Image (No Cropping)</label>
              <input type="file" name="mainImage" id="mainImage" accept="image/*" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <p class="text-sm text-gray-500 mt-1">Upload the main image without cropping.</p>
              <span id="error-mainImage" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Additional Images (to be cropped) -->
            <div>
              <label class="block text-gray-700 font-semibold">Product Images (Max 4)</label>
              <input type="file" name="images" id="images" multiple accept="image/*" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <p class="text-sm text-gray-500 mt-1">You can upload up to 4 additional images (these will be cropped).</p>
              <span id="error-images" class="text-red-500 text-sm"></span>
            </div>
            
            <!-- Hidden input to store crop data -->
            <input type="hidden" name="cropData" id="cropData">
            
            <!-- Submit Button -->
            <div>
              <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">Add Product</button>
            </div>
          </form>
      </div>
    </main>
    <%- include('partials/footer') %>
  </div>

  <!-- Cropper Modal -->
  <div id="cropperModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-2xl w-full">
      <h2 class="text-xl font-bold mb-4">Crop Image <span id="imageCounter"></span></h2>
      <div class="w-full h-96 overflow-hidden bg-gray-100 mb-4">
        <img id="cropperImage" class="max-w-full">
      </div>
      <div class="flex justify-between items-center">
        <p class="text-sm text-gray-500">Drag to adjust the crop area. For best results, make a square crop.</p>
        <div class="flex space-x-4">
          <button id="skipBtn" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition">Skip Cropping</button>
          <button id="cropBtn" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition">Save Crop</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Form submission with validation
      document.getElementById('addProductForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Clear any previous error messages
        document.querySelectorAll('.text-red-500').forEach(el => el.textContent = "");
        
        // Confirm before submitting
        const result = await Swal.fire({
          title: 'Add New Product?',
          text: 'Are you sure you want to add this product?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Yes, add it!',
          cancelButtonText: 'Cancel',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33'
        });
        
        if (result.isConfirmed) {
          const formData = new FormData(this);
          try {
            const response = await fetch('/admin/addproduct', {
              method: 'POST',
              body: formData
            });
            
            const data = await response.json();
            
            if (!response.ok) {
              // Display validation errors
              if (data.errors) {
                for (const field in data.errors) {
                  const errorElement = document.getElementById(`error-${field}`);
                  if (errorElement) {
                    errorElement.textContent = data.errors[field];
                  }
                }
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Failed to add product',
                  text: data.message || 'An error occurred'
                });
              }
              return;
            }
            
            // Success message and redirect
            Swal.fire({
              icon: 'success',
              title: 'Product added successfully!'
            }).then(() => {
              window.location.href = '/admin/product-list2';
            });
          } catch (error) {
            Swal.fire({
              icon: 'error',
              title: 'Failed to add product',
              text: error.message
            });
          }
        }
      });

      // Image cropping functionality
      let files = [];
      let cropDataArray = [];
      let currentFileIndex = 0;
      let cropperInstance = null;

      // Get elements
      const imagesInput = document.getElementById('images');
      const cropperModal = document.getElementById('cropperModal');
      const cropperImage = document.getElementById('cropperImage');
      const cropDataInput = document.getElementById('cropData');
      const cropBtn = document.getElementById('cropBtn');
      const skipBtn = document.getElementById('skipBtn');
      const imageCounter = document.getElementById('imageCounter');

      // Initialize with empty array
      cropDataInput.value = JSON.stringify([]);

      // Handle file selection
      imagesInput.addEventListener('change', function(e) {
        files = Array.from(e.target.files);
        
        // Validate maximum number of files
        if (files.length > 4) {
          files = files.slice(0, 4);
          Swal.fire({
            icon: 'info',
            title: 'Maximum 4 images allowed',
            text: 'Only the first 4 images will be processed.'
          });
        }
        
        if (files.length === 0) return;
        
        // Initialize crop data array
        cropDataArray = new Array(files.length).fill(null);
        currentFileIndex = 0;
        
        // Start cropping process
        startCroppingProcess();
      });

      function startCroppingProcess() {
        if (files.length === 0) return;
        
        // Update image counter display
        imageCounter.textContent = `(${currentFileIndex + 1}/${files.length})`;
        
        // Show modal
        cropperModal.classList.remove('hidden');
        
        // Load image
        const reader = new FileReader();
        reader.onload = function(e) {
          cropperImage.src = e.target.result;
          
          // Destroy previous cropper instance if it exists
          if (cropperInstance) {
            cropperInstance.destroy();
          }
          
          // Initialize new cropper with a delay to ensure image is loaded
          setTimeout(() => {
            cropperInstance = new Cropper(cropperImage, {
              aspectRatio: 1,
              viewMode: 1,
              guides: true,
              autoCropArea: 0.8,
              responsive: true,
              ready: function() {
                console.log('Cropper initialized for image', currentFileIndex + 1);
              }
            });
          }, 200);
        };
        
        reader.readAsDataURL(files[currentFileIndex]);
      }

      // Handle crop button click
      cropBtn.addEventListener('click', function() {
        if (!cropperInstance) return;
        
        try {
          // Get crop data
          const data = cropperInstance.getData(true);
          cropDataArray[currentFileIndex] = {
            x: Math.round(data.x),
            y: Math.round(data.y),
            width: Math.round(data.width),
            height: Math.round(data.height)
          };
          
          console.log('Crop data saved for image', currentFileIndex + 1, cropDataArray[currentFileIndex]);
          
          // Proceed to next image
          processNextImage();
        } catch (err) {
          console.error('Error getting crop data:', err);
          cropDataArray[currentFileIndex] = null;
          processNextImage();
        }
      });

      // Handle skip button click
      skipBtn.addEventListener('click', function() {
        cropDataArray[currentFileIndex] = null;
        console.log('Skipped cropping for image', currentFileIndex + 1);
        processNextImage();
      });

      function processNextImage() {
        // Destroy current cropper instance
        if (cropperInstance) {
          cropperInstance.destroy();
          cropperInstance = null;
        }
        
        // Move to next image
        currentFileIndex++;
        
        if (currentFileIndex < files.length) {
          // Process next image
          startCroppingProcess();
        } else {
          // We're done with all images
          cropperModal.classList.add('hidden');
          
          // Save final crop data to hidden input
          cropDataInput.value = JSON.stringify(cropDataArray);
          
          console.log('All images processed. Final crop data:', cropDataInput.value);
          
          // Show completion message
          Swal.fire({
            icon: 'success',
            title: 'Images Processed',
            text: 'All images have been prepared for upload'
          });
        }
      }
    });
  </script>
</body>
</html>