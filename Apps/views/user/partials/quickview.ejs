<!-- Quick View Button (Add this wherever you want to trigger the modal) -->
<button type="button" 
  class="open-quick-view inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary" 
  data-product-id="<%= product.id %>">
  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
  Quick View
</button>

<!-- Modal Component -->
<div id="quickViewModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="quickViewModalLabel" aria-hidden="true">
  <div class="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
    <!-- Background overlay -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    
    <!-- Modal panel -->
    <div class="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:align-middle">
      <button type="button" class="absolute right-4 top-4 text-gray-400 hover:text-gray-500" data-dismiss="modal" aria-label="Close">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <div class="p-6">
        <div class="flex flex-col md:flex-row md:space-x-8">
          <!-- Product Gallery -->
          <div class="md:w-1/2">
            <div class="relative">
              <!-- Main product image slider -->
              <div class="product-image-slider mb-4 overflow-hidden rounded-lg">
                <% if (product.images && Array.isArray(product.images)) { %>
                  <% product.images.forEach((image, index) => { %>
                    <div class="<%= index === 0 ? 'block' : 'hidden' %> main-image" data-index="<%= index %>">
                      <img src="/<%= image %>" alt="<%= product.productName %>" class="h-auto w-full object-cover">
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="flex h-64 items-center justify-center bg-gray-100 text-gray-500">
                    No images available for this product.
                  </div>
                <% } %>
              </div>
              
              <!-- Thumbnails -->
              <% if (product.images && Array.isArray(product.images) && product.images.length > 1) { %>
                <div class="slider-nav-thumbnails flex space-x-2 overflow-x-auto pb-2">
                  <% product.images.forEach((image, index) => { %>
                    <div class="thumbnail-item cursor-pointer" data-index="<%= index %>">
                      <img src="/<%= image %>" alt="<%= product.productName %>" class="h-16 w-16 rounded-md object-cover <%= index === 0 ? 'ring-2 ring-primary' : '' %>">
                    </div>
                  <% }) %>
                </div>
              <% } %>
              
              <!-- Zoom icon -->
              <button class="absolute right-2 top-2 rounded-full bg-white p-2 shadow-md hover:bg-gray-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Product Details -->
          <div class="md:w-1/2">
            <div class="space-y-4">
              <h2 class="text-2xl font-bold text-gray-900"><%= product.productName %></h2>
              
              <div class="flex items-center justify-between">
                <div>
                  <span class="text-sm text-gray-600">Brand: </span>
                  <% if (product.brands && product.brands.name) { %>
                    <a href="/brands/<%= product.brands.name %>" class="text-sm font-medium text-primary hover:underline"><%= product.brands.name %></a>
                  <% } else { %>
                    <span class="text-sm text-gray-500">No brand available</span>
                  <% } %>
                </div>
                
                <div class="flex items-center">
                  <div class="relative inline-block h-4 w-20 bg-gray-200">
                    <div class="absolute inset-y-0 left-0 bg-yellow-400" style="width:90%"></div>
                  </div>
                  <span class="ml-2 text-xs text-gray-500">(25 reviews)</span>
                </div>
              </div>
              
              <div class="border-t border-gray-200 pt-4">
                <div class="text-2xl font-bold text-primary">$<%= product.price %></div>
              </div>
              
              <div class="border-t border-gray-200 pt-4">
                <p class="text-sm text-gray-600"><%= product.description %></p>
              </div>
              
              <div class="border-t border-gray-200 pt-4">
                <div class="flex items-center space-x-4">
                  <!-- Quantity selector -->
                  <div class="flex h-10 w-32 items-center rounded-md border border-gray-300">
                    <button class="qty-down flex h-full w-10 items-center justify-center text-gray-600 hover:bg-gray-100">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                      </svg>
                    </button>
                    <span class="qty-val flex-1 text-center">1</span>
                    <button class="qty-up flex h-full w-10 items-center justify-center text-gray-600 hover:bg-gray-100">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                    </button>
                  </div>
                  
                  <!-- Action buttons -->
                  <div class="flex space-x-2">
                    <button type="button" class="add-to-cart flex items-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-white hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2" data-product-id="<%= product.id %>">
                      <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      Add to cart
                    </button>
                    
                    <button type="button" class="add-to-wishlist flex items-center rounded-md border border-gray-300 bg-white p-2 text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2" aria-label="Add To Wishlist" data-product-id="<%= product.id %>">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                    </button>
                    
                    <button type="button" class="add-to-compare flex items-center rounded-md border border-gray-300 bg-white p-2 text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2" aria-label="Compare" data-product-id="<%= product.id %>">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="border-t border-gray-200 pt-4">
                <div class="text-sm text-gray-600">
                  Availability: 
                  <span class="ml-1 font-medium text-green-600"><%= product.stock %> Items In Stock</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Modal elements
    const modal = document.getElementById('quickViewModal');
    const closeButton = modal.querySelector('[data-dismiss="modal"]');
    const openButtons = document.querySelectorAll('.open-quick-view');
    
    // Open modal function
    function openModal(productId) {
      // You can fetch product data here if needed
      // fetchProductData(productId).then(data => {
      //   // Update modal content with fetched data
      // });
      
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
    
    // Close modal function
    function closeModal() {
      modal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    }
    
    // Event listeners for opening modal
    openButtons.forEach(button => {
      button.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        openModal(productId);
      });
    });
    
    // Event listeners for closing modal
    closeButton.addEventListener('click', closeModal);
    
    // Close when clicking outside the modal content
    modal.addEventListener('click', function(event) {
      if (event.target === modal || event.target.classList.contains('bg-opacity-75')) {
        closeModal();
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
    
    // Thumbnail click handling
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    const mainImages = document.querySelectorAll('.main-image');
    
    thumbnails.forEach(thumb => {
      thumb.addEventListener('click', function() {
        const index = this.getAttribute('data-index');
        
        // Hide all images
        mainImages.forEach(img => img.classList.add('hidden'));
        
        // Show selected image
        mainImages[index].classList.remove('hidden');
        
        // Update thumbnail styling
        thumbnails.forEach(t => {
          t.querySelector('img').classList.remove('ring-2', 'ring-primary');
        });
        this.querySelector('img').classList.add('ring-2', 'ring-primary');
      });
    });
    
    // Quantity buttons
    const qtyDown = document.querySelector('.qty-down');
    const qtyUp = document.querySelector('.qty-up');
    const qtyVal = document.querySelector('.qty-val');
    
    qtyDown.addEventListener('click', function() {
      let val = parseInt(qtyVal.textContent);
      if (val > 1) {
        qtyVal.textContent = val - 1;
      }
    });
    
    qtyUp.addEventListener('click', function() {
      let val = parseInt(qtyVal.textContent);
      qtyVal.textContent = val + 1;
    });
    
    // Add to cart functionality
    const addToCartBtn = modal.querySelector('.add-to-cart');
    addToCartBtn.addEventListener('click', function() {
      const productId = this.getAttribute('data-product-id');
      const quantity = parseInt(qtyVal.textContent);
      
      // Add to cart logic - you can implement AJAX call here
      console.log('Adding to cart:', productId, 'Quantity:', quantity);
      
      // Example AJAX call (uncomment and modify as needed)
      /*
      fetch('/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productId: productId,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        // Show success message
        console.log('Success:', data);
        // Maybe close modal or show confirmation
      })
      .catch((error) => {
        console.error('Error:', error);
      });
      */
      
      // Show success notification
      showNotification('Product added to cart successfully!', 'success');
    });
    
    // Wishlist functionality
    const wishlistBtn = modal.querySelector('.add-to-wishlist');
    wishlistBtn.addEventListener('click', function() {
      const productId = this.getAttribute('data-product-id');
      console.log('Adding to wishlist:', productId);
      
      // Add your wishlist logic here
      
      showNotification('Product added to wishlist!', 'success');
    });
    
    // Compare functionality
    const compareBtn = modal.querySelector('.add-to-compare');
    compareBtn.addEventListener('click', function() {
      const productId = this.getAttribute('data-product-id');
      console.log('Adding to compare:', productId);
      
      // Add your compare logic here
      
      showNotification('Product added to comparison!', 'success');
    });
    
    // Notification function
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        'bg-blue-500'
      } text-white`;
      notification.innerHTML = message;
      
      // Add to DOM
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 500);
      }, 3000);
    }
  });
</script>