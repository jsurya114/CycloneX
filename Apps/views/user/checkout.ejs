<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CycloneX Checkout</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Add Toastify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {"50":"#f0f9ff","100":"#e0f2fe","200":"#bae6fd","300":"#7dd3fc","400":"#38bdf8","500":"#0ea5e9","600":"#0284c7","700":"#0369a1","800":"#075985","900":"#0c4a6e","950":"#082f49"},
                        secondary: '#f97316',
                        accent: '#8b5cf6',
                        dark: '#0f172a'
                    },
                    animation: {
                        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                    },
                    boxShadow: {
                        'soft': '0 4px 20px 0 rgba(0, 0, 0, 0.05)',
                        'hover': '0 10px 25px -5px rgba(0, 0, 0, 0.1)',
                    }
                },
                fontFamily: {
                    'body': ['Poppins', 'ui-sans-serif', 'system-ui', '-apple-system', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif'],
                    'sans': ['Poppins', 'ui-sans-serif', 'system-ui', '-apple-system', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif']
                }
            }
        }
    </script>
    <style>
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .dark ::-webkit-scrollbar-track {
            background: #1e293b;
        }
        ::-webkit-scrollbar-thumb {
            background: #0ea5e9;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #0284c7;
        }
        
        /* Smooth transitions */
        .checkout-item {
            transition: all 0.3s ease;
        }
        
        /* Fix for hover effect in dark mode */
        .dark .checkout-item:hover {
            transform: translateY(-2px);
            background-color: #1e293b !important; /* Darker background in dark mode */
        }
        
        /* Light mode hover effect */
        .checkout-item:hover {
            transform: translateY(-2px);
            background-color: #f8fafc;
        }
        
        /* Custom radio buttons */
        .custom-radio input[type="radio"] {
            display: none;
        }
        
        .custom-radio .radio-label {
            display: inline-block;
            position: relative;
            padding-left: 30px;
            cursor: pointer;
            line-height: 20px;
        }
        
        .custom-radio .radio-label:before {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            width: 20px;
            height: 20px;
            border: 2px solid #ddd;
            border-radius: 50%;
            background: #fff;
        }
        
        .dark .custom-radio .radio-label:before {
            border-color: #4b5563;
            background: #1f2937;
        }
        
        .custom-radio input[type="radio"]:checked + .radio-label:after {
            content: "";
            position: absolute;
            left: 5px;
            top: 5px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #0ea5e9;
        }
        
        .custom-radio input[type="radio"]:checked + .radio-label:before {
            border-color: #0ea5e9;
        }
        
        /* Address card hover effect */
        .address-card {
            transition: all 0.3s ease;
        }
        .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .dark .address-card:hover {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
        }
        
        /* Payment method card hover effect */
        .payment-card {
            transition: all 0.3s ease;
        }
        .payment-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .dark .payment-card:hover {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
        }
        
        /* Progress bar animation */
        .progress-bar-animation {
            transition: width 0.5s ease-in-out;
        }

        /* Coupon card hover effect */
        .coupon-card {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .coupon-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .dark .coupon-card:hover {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
        }
        
        /* Coupon card dashed border */
        .coupon-card::before {
            content: "";
            position: absolute;
            left: -2px;
            top: 50%;
            height: 20px;
            width: 10px;
            background-color: inherit;
            border-radius: 0 50% 50% 0;
            transform: translateY(-50%);
        }

        .coupon-card::after {
            content: "";
            position: absolute;
            right: -2px;
            top: 50%;
            height: 20px;
            width: 10px;
            background-color: inherit;
            border-radius: 50% 0 0 50%;
            transform: translateY(-50%);
        }
        
        /* Dark mode toggle button */
        .dark-mode-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #0ea5e9;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            z-index: 40;
            transition: all 0.3s ease;
        }
        
        .dark-mode-toggle:hover {
            transform: scale(1.1);
        }
        
        .dark-mode-toggle i {
            font-size: 1.25rem;
            transition: transform 0.5s ease;
        }
        
        .dark-mode-toggle:hover i {
            transform: rotate(30deg);
        }
        
        /* Transition for dark mode */
        body {
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        /* Toast notification custom styling */
        .toastify {
            border-radius: 8px !important;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            padding: 12px 20px !important;
        }
        
        /* Quantity update animation */
        @keyframes pulse-once {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse-animation {
            animation: pulse-once 0.5s ease-in-out;
        }

        /* Applied coupon container */
        .applied-coupon-container {
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Coupon badge */
        .coupon-badge {
            position: relative;
            overflow: hidden;
        }

        .coupon-badge::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(
                45deg,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.1) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            transform: translateX(-100%);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            100% {
                transform: translateX(100%);
            }
        }

        /* Loading spinner */
        .spinner {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }
        
        /* Validation error styles */
        .validation-error {
            border-color: #ef4444 !important;
            box-shadow: 0 0 0 1px #ef4444 !important;
        }
        
        .error-shake {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
        
        @keyframes shake {
            10%, 90% { transform: translate3d(-1px, 0, 0); }
            20%, 80% { transform: translate3d(2px, 0, 0); }
            30%, 50%, 70% { transform: translate3d(-3px, 0, 0); }
            40%, 60% { transform: translate3d(3px, 0, 0); }
        }
        
        /* Warning message styles */
        .warning-message {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease, opacity 0.3s ease, margin 0.3s ease;
            opacity: 0;
        }
        
        .warning-message.show {
            max-height: 100px;
            opacity: 1;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        /* Coupon used indicator */
        .coupon-used-indicator {
            position: absolute;
            top: 0;
            right: 0;
            background-color: #ef4444;
            color: white;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 0 0 0 8px;
            transform: translateY(-100%);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }
        
        .coupon-used-indicator.show {
            transform: translateY(0);
            opacity: 1;
        }
    </style>
</head>
<body class="font-body bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white">
    <%- include('partials/header') %>

    <main class="min-h-screen">
  <!-- Checkout Container -->
<div class="container mx-auto px-4">
    <!-- Checkout Progress Bar -->
    <div class="max-w-4xl mx-auto my-4 sm:my-6 md:my-8 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-3 sm:p-4 md:p-6">
      <!-- Header with Progress Information -->
      <div class="flex justify-between items-center mb-2">
        <h2 class="text-base sm:text-lg font-semibold text-gray-700 dark:text-gray-200">Checkout Progress</h2>
        <span class="text-xs sm:text-sm font-medium text-primary-600 dark:text-primary-400">Step 2 of 3</span>
      </div>
      
      <!-- Progress Bar -->
      <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 sm:h-2.5">
        <div class="bg-gradient-to-r from-primary-500 to-accent-500 h-2 sm:h-2.5 rounded-full progress-bar-animation" style="width: 66%"></div>
      </div>
      
      <!-- Step Indicators -->
      <div class="flex justify-between mt-2 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
        <!-- Step 1: Cart -->
        <div class="flex flex-col items-center">
          <div class="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 rounded-full bg-primary-500 text-white flex items-center justify-center mb-1">
            <i class="fas fa-check text-xs sm:text-sm"></i>
          </div>
          <span class="hidden xs:block text-center">Cart</span>
          <span class="xs:hidden text-center">1</span>
        </div>
        
        <!-- Step 2: Checkout -->
        <div class="flex flex-col items-center">
          <div class="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 rounded-full bg-primary-500 text-white flex items-center justify-center mb-1">
            <span class="text-xs sm:text-sm">2</span>
          </div>
          <span class="hidden xs:block text-center">Checkout</span>
          <span class="xs:hidden text-center">2</span>
        </div>
        
        <!-- Step 3: Confirmation -->
        <div class="flex flex-col items-center">
          <div class="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 rounded-full bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400 flex items-center justify-center mb-1">
            <span class="text-xs sm:text-sm">3</span>
          </div>
          <span class="hidden xs:block text-center">Confirmation</span>
          <span class="xs:hidden text-center">3</span>
        </div>
      </div>
    </div>
  </div>
        <div class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pb-24">
            <div class="lg:grid lg:grid-cols-12 lg:gap-x-12 lg:items-start xl:gap-x-16">
                <!-- Checkout Form Section -->
                <section aria-labelledby="checkout-heading" class="lg:col-span-7">
                    <h2 id="checkout-heading" class="sr-only">Checkout details</h2>
                    
                    <!-- Shipping Address Section -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-soft overflow-hidden mb-8">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <h3 class="text-xl font-semibold flex items-center">
                                <i class="fas fa-map-marker-alt text-primary-500 mr-2"></i>
                                Shipping Address
                            </h3>
                        </div>
                        
                        <div class="p-6">
                           <!-- Saved Addresses -->
                           <div class="mb-8">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-5 border-b border-gray-200 dark:border-gray-700 pb-2">Select a Delivery Address</h4>
                            
                            <!-- Address Selection Warning Message -->
                            <div id="address-warning" class="warning-message bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 mb-4">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0">
                                        <i class="fas fa-exclamation-circle text-red-500 mt-0.5"></i>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Please select a delivery address</h3>
                                        <p class="text-sm text-red-700 dark:text-red-300 mt-1">You must select a delivery address before proceeding with your order.</p>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                                <% if(address && address.length > 0) { %>
                                    <% address.forEach((addr, index) => { %>
                                        <!-- Address Card -->
                                        <div class="address-card bg-white dark:bg-gray-800 border-2 rounded-lg shadow-sm hover:shadow-md transition-all duration-300 <%= index === 0 ? 'border-primary-500' : 'border-gray-200 dark:border-gray-700' %> p-5 cursor-pointer relative overflow-hidden group">
                                            <input type="radio" name="address" id="address<%= index %>" class="address-radio hidden" <%= index === 0 ? 'checked' : '' %> value="<%= addr._id %>">
                                            <label for="address<%= index %>" class="absolute inset-0 cursor-pointer z-10"></label>
                                            
                                            <!-- Top Section with Badge -->
                                            <div class="flex justify-between items-start mb-3">
                                                <div class="flex items-center space-x-2">
                                                    <span class="<%= index === 0 ? 'bg-primary-500' : 'bg-gray-200 dark:bg-gray-700 group-hover:bg-primary-100 dark:group-hover:bg-gray-600' %> text-<%= index === 0 ? 'white' : 'gray-700 dark:text-gray-300' %> text-xs font-medium px-2.5 py-1 rounded-full transition-colors duration-300"><%= addr.addressType || 'Address' %></span>
                                                    <% if (index === 0) { %>
                                                        <span class="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300 text-xs px-2.5 py-1 rounded-full">Default</span>
                                                    <% } %>
                                                </div>
                                                <div class="w-6 h-6 rounded-full border-2 transition-colors duration-300 <%= index === 0 ? 'border-primary-500 bg-primary-50 dark:bg-primary-900' : 'border-gray-300 dark:border-gray-600 group-hover:border-primary-300' %> flex items-center justify-center">
                                                    <div class="w-3 h-3 rounded-full transition-all duration-300 <%= index === 0 ? 'bg-primary-500' : 'bg-transparent group-hover:bg-primary-200 dark:group-hover:bg-primary-800' %>"></div>
                                                </div>
                                            </div>
                                            
                                            <!-- Address Content -->
                                            <div class="mt-2 text-sm text-gray-600 dark:text-gray-400 space-y-1.5">
                                                <p class="font-medium text-gray-800 dark:text-white text-base mb-2"><%= addr.fullname %></p>
                                                
                                                <div class="grid grid-cols-2 gap-x-3 gap-y-1.5">
                                                    <div class="flex items-start space-x-2">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 dark:text-gray-400 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                                        </svg>
                                                        <span class="line-clamp-1"><%= addr.email %></span>
                                                    </div>
                                                    <div class="flex items-start space-x-2">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 dark:text-gray-400 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                                        </svg>
                                                        <span><%= addr.mobileNum %></span>
                                                    </div>
                                                </div>
                                                
                                                <div class="mt-3 pt-3 border-t border-gray-100 dark:border-gray-700">
                                                    <div class="flex items-start space-x-2">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 dark:text-gray-400 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                        </svg>
                                                        <div>
                                                            <p><%= addr.address %></p>
                                                            <% if (addr.landmark) { %>
                                                                <p class="text-gray-500 dark:text-gray-500 text-xs mt-0.5">Landmark: <%= addr.landmark %></p>
                                                            <% } %>
                                                            <p class="mt-1"><%= addr.state %>, <%= addr.country %> - <%= addr.pincode %></p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!-- Edit/Select Actions -->
                                            <div class="absolute bottom-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-2 flex space-x-1">
                                                <button type="button" class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                                    Edit
                                                </button>
                                                <button type="button" class="address-select-btn text-xs px-2 py-1 bg-primary-50 dark:bg-primary-900 text-primary-600 dark:text-primary-400 rounded hover:bg-primary-100 dark:hover:bg-primary-800 transition-colors" data-address-id="<%= addr._id %>" data-index="<%= index %>">
                                                    Select
                                                </button>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="col-span-2 text-center p-8 border border-dashed border-gray-300 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800/50">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        <p class="text-gray-600 dark:text-gray-400 mb-3">No saved addresses found.</p>
                                      
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="mt-5 flex justify-center md:justify-start">
                                <button id="showAddAddressForm" type="button" class="bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-lg flex items-center transition-colors shadow-md">
                                    <i class="fas fa-plus mr-2"></i>
                                    Add New Address
                                </button>
                            </div>
                        </div>

                        <!-- Add New Address Form (Initially Hidden) -->
                        <div id="addAddressForm" class="hidden p-6 border-t border-gray-200 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-5">Add New Address</h4>
                            
                            <form id="newAddressForm" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- Full Name -->
                                <div>
                                    <label for="fullName" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Full Name</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-user text-gray-400"></i>
                                        </div>
                                        <input type="text" id="fullName" name="fullName" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your full name">
                                    </div>
                                </div>
                                
                                <!-- Email Address -->
                                <div>
                                    <label for="email" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Email Address</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-envelope text-gray-400"></i>
                                        </div>
                                        <input type="email" id="email" name="email" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your email">
                                    </div>
                                </div>
                                
                                <!-- Mobile Number -->
                                <div>
                                    <label for="mobile" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Mobile Number</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-phone text-gray-400"></i>
                                        </div>
                                        <input type="tel" id="mobile" name="mobile" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your mobile number">
                                    </div>
                                </div>
                                
                                <!-- Country -->
                                <div>
                                    <label for="country" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Country</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-globe text-gray-400"></i>
                                        </div>
                                        <input type="text" id="country" name="country" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your country">
                                    </div>
                                </div>
                                
                                <!-- State -->
                                <div>
                                    <label for="state" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">State</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-map text-gray-400"></i>
                                        </div>
                                        <input type="text" id="state" name="state" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your state">
                                    </div>
                                </div>
                                
                                <!-- Address -->
                                <div>
                                    <label for="address" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Address</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-home text-gray-400"></i>
                                        </div>
                                        <input type="text" id="address" name="address" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your address">
                                    </div>
                                </div>
                                
                                <!-- Pincode -->
                                <div>
                                    <label for="pincode" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Pincode</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-map-pin text-gray-400"></i>
                                        </div>
                                        <input type="text" id="pincode" name="pincode" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter your pincode">
                                    </div>
                                </div>
                                
                                <!-- Landmark -->
                                <div>
                                    <label for="landmark" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Landmark</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-landmark text-gray-400"></i>
                                        </div>
                                        <input type="text" id="landmark" name="landmark" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white" placeholder="Enter nearby landmark">
                                    </div>
                                </div>
                                
                                <!-- Address Type -->
                                <div>
                                    <label for="addressType" class="text-gray-700 dark:text-gray-300 font-medium mb-2 block">Address Type</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-tag text-gray-400"></i>
                                        </div>
                                        <select id="addressType" name="addressType" class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 dark:bg-gray-700 dark:text-white">
                                            <option value="Home">Home</option>
                                            <option value="Work">Work</option>
                                            <option value="Other">Other</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <!-- Submit and Cancel buttons -->
                                <div class="md:col-span-2 flex gap-4 mt-4">
                                    <button type="submit" class="bg-primary-600 hover:bg-primary-700 text-white py-3 px-6 rounded-lg flex items-center transition-colors shadow-md">
                                        <i class="fas fa-save mr-2"></i>
                                        Save Address
                                    </button>
                                    <button type="button" id="cancelAddAddress" class="bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 py-3 px-6 rounded-lg flex items-center transition-colors">
                                        <i class="fas fa-times mr-2"></i>
                                        Cancel
                                    </button>
                                </div>
                            </form>
                        </div>
                            
                          <!-- Shipping Options -->
<div class="mt-8 border-t border-gray-200 dark:border-gray-700 pt-6">
    <!-- <h4 class="text-base font-medium text-gray-800 dark:text-white mb-4">Shipping Method</h4> -->
    <div class="space-y-3">
        <% if (freeShipping) { %>
            <!-- Free Shipping Notice -->
            <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-xl p-4 mb-4">
                <div class="flex items-center">
                    <i class="fas fa-gift text-green-500 mr-3 text-lg"></i>
                    <div>
                        <h5 class="font-medium text-gray-800 dark:text-white">Free Shipping</h5>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Your order qualifies for free shipping!</p>
                    </div>
                </div>
            </div>
        <% } %>
   
    </div>

                            <!-- Coupon Code Section -->
                            <div class="mt-8 border-t border-gray-200 dark:border-gray-700 pt-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h4 class="text-base font-medium text-gray-800 dark:text-white">Apply Coupon Code</h4>
                                    <button type="button" id="show-available-coupons" class="text-xs text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">
                                        View Available Coupons
                                    </button>
                                </div>
                                
                                <!-- Coupon Warning Message -->
                                <div id="coupon-warning" class="warning-message bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 mb-4">
                                    <div class="flex items-start">
                                        <div class="flex-shrink-0">
                                            <i class="fas fa-exclamation-circle text-red-500 mt-0.5"></i>
                                        </div>
                                        <div class="ml-3">
                                            <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Coupon already used</h3>
                                            <p class="text-sm text-red-700 dark:text-red-300 mt-1">This coupon has already been applied and cannot be used again.</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="coupon-input-container" class="flex space-x-2">
                                    <input type="text" id="coupon-code" placeholder="Enter coupon code" class="flex-1 min-w-0 block w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                                    <button type="button" id="apply-coupon-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                        Apply
                                    </button>
                                </div>
                                <div id="remove-coupon-container" class="hidden flex items-center justify-between bg-green-50 dark:bg-green-900/20 rounded-md p-2 mt-2">
                                    <div class="flex items-center">
                                        <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                        <span class="text-sm text-green-700 dark:text-green-300" id="active-coupon-text">Coupon applied</span>
                                    </div>
                                    <button type="button" id="remove-coupon-btn" class="text-xs text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300">
                                        Remove
                                    </button>
                                </div>
                            </div>

                          <!-- Available Coupons Section (Hidden by default) -->
<div id="available-coupons-container" class="hidden mt-4 mb-6 border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50">
    <h4 class="text-sm font-medium text-gray-800 dark:text-white mb-3">Available Coupons</h4>
    <div class="space-y-3 coupon-list">
        <% if(coupons && coupons.length > 0) { %>
            <% coupons.forEach(coupon => { %>
                <% if(!coupon.isBlocked && new Date(coupon.expireDate) >= new Date()) { %>
                    <!-- Coupon Card -->
                    <div class="coupon-card bg-white dark:bg-gray-800 border border-dashed border-primary-300 dark:border-primary-700 rounded-lg p-3 cursor-pointer relative">
                        <!-- Coupon Used Indicator (Hidden by default) -->
                        <div class="coupon-used-indicator" id="used-indicator-<%= coupon.couponCode %>">Already Used</div>
                        
                        <div class="flex justify-between items-start">
                            <div>
                                <h5 class="font-medium text-gray-800 dark:text-white text-sm"><%= coupon.couponCode %></h5>
                                <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">
                                    ₹<%= coupon.offerPrice %> off on orders above ₹<%= coupon.minAmount %>
                                </p>
                                <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                                    Valid till: <%= new Date(coupon.expireDate).toLocaleDateString() %>
                                </p>
                            </div>
                            <button type="button" class="text-xs bg-primary-50 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 px-2 py-1 rounded" onclick="applyCoupon('<%= coupon.couponCode %>')">
                                Use
                            </button>
                        </div>
                    </div>
                <% } %>
            <% }); %>
        <% } else { %>
            <div class="text-center py-3">
                <p class="text-gray-600 dark:text-gray-400">No coupons available at the moment.</p>
            </div>
        <% } %>
    </div>
</div>
                        </div>
                    </div>
                    
                    <!-- Payment Method Section -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-soft overflow-hidden mb-8">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <h3 class="text-xl font-semibold flex items-center">
                                <i class="fas fa-credit-card text-primary-500 mr-2"></i>
                                Payment Method
                            </h3>
                        </div>
                        
                        <div class="p-6">
                            <!-- Payment Method Warning Message -->
                            <div id="payment-warning" class="warning-message bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 mb-4">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0">
                                        <i class="fas fa-exclamation-circle text-red-500 mt-0.5"></i>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Please select a payment method</h3>
                                        <p class="text-sm text-red-700 dark:text-red-300 mt-1">You must select a payment method before proceeding with your order.</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Payment Options -->
                            <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-6">
                                 <!-- Razorpay Payment Card -->
                                <div class="payment-card border border-gray-200 dark:border-gray-700 rounded-xl p-4 cursor-pointer relative flex flex-col items-center justify-center h-24" id="payWithRazorpay">
                                    <input type="radio" name="payment" id="razorpay" value="razorpay" class="hidden">
                                    <label for="razorpay" class="absolute inset-0 cursor-pointer"></label>

                                    <i class="fas fa-credit-card text-gray-600 dark:text-gray-400 text-2xl mb-2"></i>
                                    <span class="text-sm font-medium text-gray-800 dark:text-white">Razor Pay</span>
                                </div>
                                
                                <!-- Cash on Delivery -->
                                <div class="payment-card border border-gray-200 dark:border-gray-700 rounded-xl p-4 cursor-pointer relative flex flex-col items-center justify-center h-24">
                                    <input type="radio" name="payment" id="cod" class="hidden">
                                    <label for="cod" class="absolute inset-0 cursor-pointer"></label>
                                    <i class="fas fa-money-bill-wave text-gray-600 dark:text-gray-400 text-2xl mb-2"></i>
                                    <span class="text-sm font-medium text-gray-800 dark:text-white">Cash on Delivery</span>
                                </div>
                            </div>
                            
                            <div class="mt-6 flex items-center justify-center p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                <div class="flex items-center text-gray-600 dark:text-gray-400">
                                    <i class="fas fa-lock text-green-500 mr-2"></i>
                                    <span class="text-sm">Your payment information is secure and encrypted</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Order Summary -->
                <section aria-labelledby="summary-heading" class="mt-8 lg:mt-0 lg:col-span-5">
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-soft overflow-hidden sticky top-8">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <h3 class="text-xl font-semibold flex items-center">
                                <i class="fas fa-receipt text-primary-500 mr-2"></i>
                                Order Summary
                            </h3>
                        </div>
                        
                        <div class="p-6">
                             <!-- Order Summary -->
                <section aria-labelledby="summary-heading" class="mt-8 lg:mt-0 lg:col-span-5">
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-soft overflow-hidden sticky top-8">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <h3 class="text-xl font-semibold flex items-center">
                                <i class="fas fa-receipt text-primary-500 mr-2"></i>
                                Order Summary
                            </h3>
                        </div>
                        
                        <div class="p-6">
                            <!-- Order Items -->
                            
               


<div class="space-y-4 mb-6 container mx-auto px-2 sm:px-4 max-w-5xl">
    <input type="hidden" id="userProfile" data-id="<%=user._id%>">
    <% if (cart && cart.items && cart.items.length > 0) { %>
        <% cart.items.forEach(item => { %>
            <div class="flex flex-col sm:flex-row items-center sm:items-start p-3 sm:p-4 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm hover:shadow transition-all checkout-item">
                <!-- Product Image with improved rendering -->
                <div class="w-28 h-28 sm:w-20 md:w-24 lg:w-28 sm:h-20 md:h-24 lg:h-28 rounded-md bg-white dark:bg-gray-800 overflow-hidden flex-shrink-0 border border-gray-200 dark:border-gray-600">
                    <img src="<%= item.product.mainImage %>" 
                         alt="<%= item.product.productName %>" 
                         class="product-image h-full w-full object-contain object-center transform scale-95"
                         loading="lazy"
                         onerror="this.onerror=null; this.src='/images/placeholder.png'; this.classList.add('opacity-70');">
                </div>
                
                <!-- Product Details -->
                <div class="mt-3 sm:mt-0 sm:ml-4 flex-1 w-full">
                    <div class="flex flex-col sm:flex-row sm:justify-between">
                        <!-- Product Name -->
                        <a href="/productdetails/<%= item.product._id%>" class="group"> 
                            <h4 class="text-sm md:text-base font-medium text-gray-800 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors line-clamp-2 text-center sm:text-left"><%= item.product.productName %></h4>
                        </a>
                        
                        <!-- Price Section -->
                        <div class="text-center sm:text-right mt-2 sm:mt-0 sm:ml-2 min-w-fit">
                            <% if (item.maxOffer > 0) { %>
                                <p class="text-sm line-through text-gray-500 dark:text-gray-400">₹<%= item.product.price.toFixed(2) %></p>
                                <p class="text-sm font-medium text-green-600 dark:text-green-400">₹<%= item.salePrice.toFixed(2) %> 
                                    <span class="ml-1 text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-1.5 py-0.5 rounded">-<%= item.maxOffer %>%</span>
                                </p>
                            <% } else { %>
                                <p class="text-sm font-medium text-gray-900 dark:text-white">₹<%= item.salePrice.toFixed(2) %></p>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Brand -->
                    <div class="flex items-center justify-center sm:justify-start mt-2">
                        <span class="text-xs md:text-sm text-gray-500 dark:text-gray-400">Brand: <%= item.product.brands ? item.product.brands.name : 'No Brand' %></span>
                    </div>
                    
                    <!-- Quantity and Subtotal -->
                    <div class="flex flex-col sm:flex-row items-center sm:items-start sm:justify-between mt-2">
                        <div class="text-center sm:text-left">
                            <span class="text-xs md:text-sm text-gray-500 dark:text-gray-400">
                                Quantity: <%= item.quantity %>
                                <input id="quantity-<%= item.product._id %>" type="hidden" value="<%= item.quantity %>" data-product-id="<%= item.product._id %>" data-price="<%= item.salePrice %>">
                            </span>
                        </div>
                        <div class="text-center sm:text-right mt-1 sm:mt-0">
                            <span class="text-xs md:text-sm font-medium text-gray-700 dark:text-gray-300">
                                Subtotal: ₹<span class="item-subtotal" data-product-id="<%= item.product._id %>"><%= (cart.itemSubtotal !== undefined ? item.totalSubtotal.toFixed(2) : (item.salePrice * item.quantity).toFixed(2)) %></span>
                            </span>
                        </div>
                    </div>
                    
                    <!-- Remove Button -->
                    <div class="flex items-center justify-center sm:justify-end mt-3">
                        <button type="button" class="remove-item-btn flex items-center text-sm font-medium text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300 transition-colors px-3 py-1 rounded-full hover:bg-red-50 dark:hover:bg-red-900"
                            data-product-id="<%= item.product._id %>">
                            <i class="far fa-trash-alt mr-1"></i>
                            <span>Remove</span>
                        </button>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="text-center py-8 px-4 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
            <div class="flex flex-col items-center justify-center">
                <i class="fas fa-shopping-cart text-4xl text-gray-300 dark:text-gray-600 mb-4"></i>
                <p class="text-gray-500 dark:text-gray-400 mb-6">Your cart is empty</p>
                <a href="/shoplist" class="inline-flex items-center px-4 sm:px-6 py-2 sm:py-3 border border-transparent text-sm sm:text-base font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Continue Shopping
                </a>
            </div>
        </div>
    <% } %>
</div>

<!-- Price Breakdown -->
<dl class="space-y-4 mb-6 border-t border-gray-200 dark:border-gray-700 pt-6">
    <div class="flex items-center justify-between">
        <dt class="text-sm text-gray-600 dark:text-gray-400">Subtotal</dt>
        <dd id="subtotalAmount" class="text-sm font-medium text-gray-900 dark:text-white">
            ₹<%= subtotal.toFixed(2) %>
        </dd>
    </div>
    
    <div class="flex items-center justify-between">
        <dt class="text-sm text-gray-600 dark:text-gray-400">
            Shipping
            <% if (freeShipping) { %>
                <span class="ml-2 rounded-full bg-green-100 dark:bg-green-900 py-0.5 px-2 text-xs font-medium text-green-800 dark:text-green-200">FREE</span>
            <% } %>
        </dt>
        <dd class="text-sm font-medium <%= freeShipping ? 'text-green-600 dark:text-green-400' : 'text-gray-900 dark:text-white' %>">
            <% if (freeShipping) { %>
                ₹0.00
            <% } else { %>
                ₹<%= shippingCharge.toFixed(2) %>
            <% } %>
        </dd>
    </div>
    
 <!-- Tax -->
<div class="flex items-center justify-between">
    <dt class="text-sm text-gray-600 dark:text-gray-400">Tax (18%)</dt>
    <dd id="taxAmount" class="text-sm font-medium text-gray-900 dark:text-white">
        ₹<%= tax.toFixed(2) %>
    </dd>
</div>
    
    <div class="flex items-center justify-between">
        <dt class="flex items-center text-sm text-gray-600 dark:text-gray-400">
            <span>Discount</span>
            <span id="coupon-badge" class="ml-2 rounded-full bg-green-100 dark:bg-green-900 py-0.5 px-2 text-xs font-medium text-green-800 dark:text-green-200"><%= discountCode %></span>
        </dt>
        <dd id="discountAmount" class="text-sm font-medium text-green-600 dark:text-green-400">-₹<%= discount.toFixed(2) %></dd>
    </div>
    
   <!-- Total -->
<div class="flex items-center justify-between border-t border-gray-200 dark:border-gray-700 pt-4">
    <dt class="text-base font-medium text-gray-900 dark:text-white">Total</dt>
    <dd id="totalAmount" class="text-base font-bold text-primary-600 dark:text-primary-400">
        ₹<%= finalTotal.toFixed(2) %>
    </dd>
</div>
</dl>
                            
                            <!-- Place Order Button -->
                            <button type="button" id="placeOrderBtn" class="w-full flex items-center justify-center px-6 py-4 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                <i class="fas fa-lock mr-2"></i>
                                Place Order
                            </button>
                            
                            <!-- Terms and Conditions -->
                            <p class="mt-4 text-xs text-gray-500 dark:text-gray-400 text-center">
                                By placing your order, you agree to our 
                                <a href="#" class="text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">Terms of Service</a> and 
                                <a href="#" class="text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">Privacy Policy</a>.
                            </p>
                            
                            <!-- Payment Methods -->
                            <div class="mt-6 flex items-center justify-center space-x-4">
                                <i class="fab fa-cc-visa text-2xl text-blue-600 dark:text-blue-400"></i>
                                <i class="fab fa-cc-mastercard text-2xl text-red-600 dark:text-red-400"></i>
                                <i class="fab fa-cc-amex text-2xl text-blue-500 dark:text-blue-300"></i>
                                <i class="fab fa-cc-paypal text-2xl text-blue-800 dark:text-blue-300"></i>
                            </div>
                            
                            <!-- Secure Checkout -->
                            <div class="mt-4 flex items-center justify-center text-xs text-gray-500 dark:text-gray-400">
                                <i class="fas fa-shield-alt mr-1"></i>
                                Secure checkout powered by CycloneX
                            </div>
                        </div>
                    </div>
                </section>
            </div>
            
            <!-- Trust Badges Section -->
            <div class="mt-16 grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 flex flex-col items-center text-center">
                    <div class="w-16 h-16 bg-primary-100 dark:bg-primary-900/30 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-truck text-primary-600 dark:text-primary-400 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Free Shipping</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">On orders over ₹45000. International shipping available.</p>
                </div>
                
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 flex flex-col items-center text-center">
                    <div class="w-16 h-16 bg-primary-100 dark:bg-primary-900/30 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-undo text-primary-600 dark:text-primary-400 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">30-Day Returns</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Not satisfied? Return within 30 days for a full refund.</p>
                </div>
                
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 flex flex-col items-center text-center">
                    <div class="w-16 h-16 bg-primary-100 dark:bg-primary-900/30 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-shield-alt text-primary-600 dark:text-primary-400 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Secure Payments</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Your payment information is always protected.</p>
                </div>
            </div>
        </div>
        </section>
    </main>
    
    <!-- Dark Mode Toggle Button -->
    <button id="darkModeToggle" class="dark-mode-toggle">
        <i class="fas fa-moon dark:hidden"></i>
        <i class="fas fa-sun hidden dark:block"></i>
    </button>
    

    <%- include('partials/footer') %>
    <%- include('partials/loader') %>
    
    <!-- Add Toastify JS -->
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
      // Toast notification function - Fixed to prevent duplicate toasts
      let toastQueue = [];
      let isShowingToast = false;

      function showToast(message, isSuccess = true) {
          // Check if this message is already in the queue or currently showing
          if (toastQueue.some(item => item.message === message) || 
              (isShowingToast && toastQueue[0]?.message === message)) {
              return; // Skip duplicate toast
          }

          // Add to queue
          toastQueue.push({ message, isSuccess });
          
          // If not currently showing a toast, show this one
          if (!isShowingToast) {
              showNextToast();
          }
      }

      function showNextToast() {
          if (toastQueue.length === 0) {
              isShowingToast = false;
              return;
          }

          isShowingToast = true;
          const { message, isSuccess } = toastQueue.shift();
          
          Toastify({
              text: message,
              duration: 3000,
              gravity: "bottom",
              position: "center",
              backgroundColor: isSuccess ? "#4CAF50" : "#F44336",
              stopOnFocus: true,
              className: "rounded-lg",
              style: {
                  boxShadow: "0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)"
              },
              callback: function() {
                  // After toast is dismissed, show next toast if any
                  setTimeout(() => {
                      isShowingToast = false;
                      showNextToast();
                  }, 300);
              }
          }).showToast();
      }

// Function to update order summary
function updateOrderSummary(subtotal, tax, discount, finalTotal) {
    // Update the displayed values
    document.getElementById('subtotalAmount').textContent = `₹${subtotal.toFixed(2)}`;
    document.getElementById('taxAmount').textContent = `₹${tax.toFixed(2)}`;
    document.getElementById('discountAmount').textContent = `-₹${discount.toFixed(2)}`;
    document.getElementById('totalAmount').textContent = `₹${finalTotal.toFixed(2)}`;
    
    // Add a pulse animation to highlight the changes
    document.getElementById('totalAmount').classList.add('pulse-animation');
    setTimeout(() => {
        document.getElementById('totalAmount').classList.remove('pulse-animation');
    }, 500);
}

// Function to calculate order summary
function calculateOrderSummary() {
    // Get all item subtotals
    const itemSubtotals = document.querySelectorAll('.item-subtotal');
    let subtotal = 0;
    
    itemSubtotals.forEach(item => {
        subtotal += parseFloat(item.textContent);
    });
    
    // Calculate tax (18%)
    const tax = subtotal * 0.18;
    
    // Get shipping charge
    const shippingElement = document.querySelector("dd.text-sm.font-medium.text-gray-900, dd.text-sm.font-medium.text-green-600");
    const shippingCharge = shippingElement ? parseFloat(shippingElement.textContent.replace(/[^\d.]/g, "")) || 0 : 0;
    
    // Get discount
    const discountText = document.getElementById('discountAmount').textContent;
    const discount = parseFloat(discountText.replace(/[^\d.]/g, "")) || 0;
    
    // Calculate final total
    const finalTotal = subtotal + tax + shippingCharge - discount;
    
    // Update the order summary
    updateOrderSummary(subtotal, tax, discount, finalTotal);
    
    return {
        subtotal,
        tax,
        discount,
        shippingCharge,
        finalTotal
    };
}

// AJAX function to remove item from cart
async function removeItemAjax(productId) {
    try {
        const response = await fetch(`/checkout/${productId}`, {
            method: 'DELETE',
        });
        
        if (response.ok) {
            showToast('Item removed from cart');
            return true;
        } else {
            showToast('Failed to remove item from cart', false);
            return false;
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred', false);
        return false;
    }
}

// Dark mode toggle functionality
document.addEventListener('DOMContentLoaded', function() {
    const darkModeToggle = document.getElementById('darkModeToggle');
    const html = document.documentElement;
    
    // Check for saved theme preference or use system preference
    if (localStorage.getItem('darkMode') === 'true' || 
        (!localStorage.getItem('darkMode') && 
        window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        html.classList.add('dark');
    }
    
    // Toggle dark mode
    darkModeToggle.addEventListener('click', function() {
        html.classList.toggle('dark');
        localStorage.setItem('darkMode', html.classList.contains('dark'));
    });

    if(localStorage.getItem('couponRemoved')==='true'){
        localStorage.removeItem('couponRemoved')
        showToast('Coupon removed successfully')
    }
    if(localStorage.getItem('addressAdded') === 'true') {
        localStorage.removeItem('addressAdded'); // Clear the flag
        showToast('Address added successfully');
    }

    // Initialize address selection functionality
    initAddressSelection();

    // Initialize item removal functionality
    initItemRemoval();

    // Hide warning messages initially
    document.getElementById('address-warning').classList.remove('show');
    document.getElementById('payment-warning').classList.remove('show');
    document.getElementById('coupon-warning').classList.remove('show');

    // Payment method selection (no default selection)
    const paymentCards = document.querySelectorAll('.payment-card');
    // Ensure no payment is selected on load
    paymentCards.forEach(card => {
        const radio = card.querySelector('input[name="payment"]');
        if (radio) radio.checked = false;
        card.addEventListener('click', function() {
            // Remove selected styling from all cards
            paymentCards.forEach(c => {
                c.classList.remove('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
                c.classList.add('border-gray-200', 'dark:border-gray-700');
                const icon = c.querySelector('i');
                icon.classList.remove('text-primary-500');
                icon.classList.add('text-gray-600', 'dark:text-gray-400');
                // Uncheck each radio button
                const r = c.querySelector('input[name="payment"]');
                if (r) r.checked = false;
            });
            // Apply selected styling to clicked card
            this.classList.remove('border-gray-200', 'dark:border-gray-700');
            this.classList.add('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
            const icon = this.querySelector('i');
            icon.classList.remove('text-gray-600', 'dark:text-gray-400');
            icon.classList.add('text-primary-500');
            // Check its radio button
            const selectedRadio = this.querySelector('input[name="payment"]');
            if (selectedRadio) selectedRadio.checked = true;
            
            // Hide payment warning when a payment method is selected
            document.getElementById('payment-warning').classList.remove('show');
        });
    });

    // Initialize Coupon Manager
    const couponManager = new CouponManager();
    
    // Initialize Add Address Form
    initAddAddressForm();
});

// Initialize Add Address Form functionality
function initAddAddressForm() {
    const showAddAddressFormBtn = document.getElementById('showAddAddressForm');
    const addAddressForm = document.getElementById('addAddressForm');
    const cancelAddAddressBtn = document.getElementById('cancelAddAddress');
    
    if (showAddAddressFormBtn && addAddressForm) {
        showAddAddressFormBtn.addEventListener('click', function() {
            addAddressForm.classList.remove('hidden');
            // Scroll to the form
            addAddressForm.scrollIntoView({ behavior: 'smooth', block: 'start' });
        });
    }
    
    if (cancelAddAddressBtn && addAddressForm) {
        cancelAddAddressBtn.addEventListener('click', function() {
            addAddressForm.classList.add('hidden');
            // Clear form fields and error messages
            document.getElementById('newAddressForm').reset();
            document.querySelectorAll('.error-message').forEach(el => el.remove());
            document.querySelectorAll('.border-red-500').forEach(el => {
                el.classList.remove('border-red-500', 'focus:ring-red-200');
            });
        });
    }
}

// Coupon Manager Class
class CouponManager {
  constructor() {
    this.couponCode = document.getElementById("coupon-code")
    this.applyButton = document.getElementById("apply-coupon-btn")
    this.removeCouponContainer = document.getElementById("remove-coupon-container")
    this.couponInputContainer = document.getElementById("coupon-input-container")
    this.activeCouponText = document.getElementById("active-coupon-text")
    this.couponBadge = document.getElementById("coupon-badge")
    this.removeButton = document.getElementById("remove-coupon-btn")
    this.availableCouponsContainer = document.getElementById("available-coupons-container")
    this.showAvailableCouponsBtn = document.getElementById("show-available-coupons")
    this.couponWarning = document.getElementById("coupon-warning")

    // Order summary elements
    this.subtotalElement = document.getElementById("subtotalAmount")
    this.taxElement = document.getElementById("taxAmount")
    this.discountElement = document.getElementById("discountAmount")
    this.totalElement = document.getElementById("totalAmount")

    // Track the active coupon
    this.activeCoupon = null
    
    // Track used coupons
    this.usedCoupons = new Set()

    // Initialize event listeners
    this.initEventListeners()
  }

  initEventListeners() {
    // Apply coupon button
    this.applyButton.addEventListener("click", () => this.applyCoupon())

    // Remove coupon button
    this.removeButton.addEventListener("click", () => this.removeCoupon())

    // Toggle available coupons
    this.showAvailableCouponsBtn.addEventListener("click", () => {
      this.availableCouponsContainer.classList.toggle("hidden")
    })

    // Enter key in coupon input
    this.couponCode.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        e.preventDefault()
        this.applyCoupon()
      }
    })

    // Setup click handlers for available coupon cards
    document.querySelectorAll(".coupon-card button").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const couponCode = e.target.closest(".coupon-card").querySelector("h5").textContent.trim()
        this.couponCode.value = couponCode
        this.applyCoupon()
      })
    })
  }

  async applyCoupon() {
    const code = this.couponCode.value.trim()

    if (!code) {
      showToast("Please enter a coupon code", false)
      return
    }
    
    // Check if coupon was already used
    if (this.usedCoupons.has(code)) {
      // Show coupon already used warning
      this.couponWarning.classList.add('show');
      this.couponCode.classList.add('validation-error', 'error-shake');
      setTimeout(() => {
        this.couponCode.classList.remove('error-shake');
      }, 500);
      return;
    }

    // Show loading state
    this.applyButton.disabled = true
    this.applyButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Applying...'

    try {
      // Get current order total and shipping charge for backend validation
      const totalAmount = this.extractAmount(this.totalElement.textContent)
      const shippingElement = document.querySelector(
        "dd.text-sm.font-medium.text-gray-900, dd.text-sm.font-medium.text-green-600",
      )
      const shippingCharge = shippingElement ? this.extractAmount(shippingElement.textContent) : 0

      // Send AJAX request to backend
      const response = await fetch("/applycoupon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          couponCode: code,
          totalAmount,
          shippingCharge,
        }),
      })

      const result = await response.json()

      if (result.success) {
        // Hide coupon warning if visible
        this.couponWarning.classList.remove('show');
        this.couponCode.classList.remove('validation-error');
        
        // Update UI to show applied coupon
        this.activeCoupon = {
          code,
          discount: result.discount,
          total: result.total,
          couponId: result.couponId,
        }

        // Add to used coupons set
        this.usedCoupons.add(code);
        
        // Mark coupon as used in the available coupons list
        const couponCard = document.querySelector(`.coupon-card h5[textContent="${code}"]`)?.closest('.coupon-card');
        if (couponCard) {
          const usedIndicator = couponCard.querySelector('.coupon-used-indicator');
          if (usedIndicator) {
            usedIndicator.classList.add('show');
          }
        }

        this.updateUIForAppliedCoupon()
        this.updateOrderSummary(result.discount, result.total)
        showToast(`Coupon "${code}" applied successfully!`)

        // Hide available coupons container if it's open
        this.availableCouponsContainer.classList.add("hidden")
      } else {
        showToast(result.message, false)
        this.couponCode.focus()
      }
    } catch (error) {
      console.error("Error applying coupon:", error)
      showToast("Failed to apply coupon. Please try again.", false)
    } finally {
      // Reset button state
      this.applyButton.disabled = false
      this.applyButton.innerHTML = "Apply"
    }
  }

  async removeCoupon() {
    if (!this.activeCoupon) return

    try {
      // Show loading state
      this.removeButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Removing...'

      // Reset UI
      this.resetCouponUI()

      // Get current values for recalculation
      const subtotal = this.extractAmount(this.subtotalElement.textContent)
      const tax = this.extractAmount(this.taxElement.textContent)
      const shippingElement = document.querySelector("dd.text-sm.font-medium.text-gray-900, dd.text-sm.font-medium.text-green-600")
      const shippingCharge = shippingElement ? this.extractAmount(shippingElement.textContent) : 0
      
      // Calculate new total without discount
      const total = subtotal + tax + shippingCharge

      // Update order summary
      this.updateOrderSummary(0, total)
      
      // Set a flag in localStorage to indicate coupon was removed
      localStorage.setItem('couponRemoved', 'true')
      
      // Reload the page to ensure server-side state is updated
      location.reload()
    } catch (error) {
      console.error("Error removing coupon:", error)
      showToast("Failed to remove coupon. Please try again.", false)
    } finally {
      // Reset button state
      this.removeButton.innerHTML = "Remove"
    }
  }

  updateUIForAppliedCoupon() {
    // Update badge
    this.couponBadge.textContent = this.activeCoupon.code

    // Show remove container, hide input container
    this.removeCouponContainer.classList.remove("hidden")
    this.couponInputContainer.classList.add("hidden")

    // Update active coupon text
    this.activeCouponText.textContent = `Coupon "${this.activeCoupon.code}" applied`
  }

  resetCouponUI() {
    // Reset coupon state
    this.activeCoupon = null

    // Show input container, hide remove container
    this.couponInputContainer.classList.remove("hidden")
    this.removeCouponContainer.classList.add("hidden")

    // Clear input
    this.couponCode.value = ""
    this.couponBadge.textContent = ""
  }

  updateOrderSummary(discount, total) {
    // Update discount amount
    this.discountElement.textContent = `-₹${discount.toFixed(2)}`

    // Update total amount
    this.totalElement.textContent = `₹${total.toFixed(2)}`

    // Add pulse animation to highlight changes
    this.totalElement.classList.add("pulse-animation")
    setTimeout(() => {
      this.totalElement.classList.remove("pulse-animation")
    }, 500)
  }

  extractAmount(amountString) {
    return Number.parseFloat(amountString.replace(/[^\d.]/g, "")) || 0
  }
}

// Initialize address selection functionality
function initAddressSelection() {
    // Handle address card selection
    const addressCards = document.querySelectorAll('.address-card');
    const addressRadios = document.querySelectorAll('.address-radio');
    const addressSelectBtns = document.querySelectorAll('.address-select-btn');
    const addressWarning = document.getElementById('address-warning');
    
    // Track last selected address to prevent duplicate toasts
    let lastSelectedIndex = -1;
    
    // Function to show address selection toast
    function showAddressToast(index) {
        // Only show toast if this is a different address than last time
        if (index !== lastSelectedIndex) {
            showToast('Delivery address selected');
            lastSelectedIndex = index;
            
            // Hide address warning when an address is selected
            addressWarning.classList.remove('show');
        }
    }

    function updateAddressCardStyling(selectedIndex) {
        addressCards.forEach((card, index) => {
            const radio = card.querySelector('input[type="radio"]');
            const indicator = card.querySelector('.w-6.h-6 .w-3.h-3');
            const badge = card.querySelector('.flex.items-center.space-x-2 span:first-child');
            
            if (index === selectedIndex) {
                // Selected card styling
                card.classList.remove('border-gray-200', 'dark:border-gray-700');
                card.classList.add('border-primary-500');
                
                // Update radio button
                radio.checked = true;
                
                // Update indicator dot
                indicator.classList.remove('bg-transparent', 'group-hover:bg-primary-200', 'dark:group-hover:bg-primary-800');
                indicator.classList.add('bg-primary-500');
                
                // Update badge
                if (badge) {
                    badge.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'group-hover:bg-primary-100', 'dark:group-hover:bg-gray-600', 'text-gray-700', 'dark:text-gray-300');
                    badge.classList.add('bg-primary-500', 'text-white');
                }
            } else {
                // Non-selected card styling
                card.classList.remove('border-primary-500');
                card.classList.add('border-gray-200', 'dark:border-gray-700');
                
                // Update radio button
                radio.checked = false;
                
                // Update indicator dot
                indicator.classList.remove('bg-primary-500');
                indicator.classList.add('bg-transparent', 'group-hover:bg-primary-200', 'dark:group-hover:bg-primary-800');
                
                // Update badge
                if (badge) {
                    badge.classList.remove('bg-primary-500', 'text-white');
                    badge.classList.add('bg-gray-200', 'dark:bg-gray-700', 'group-hover:bg-primary-100', 'dark:group-hover:bg-gray-600', 'text-gray-700', 'dark:text-gray-300');
                }
            }
        });
    }
    
     // Add click event to address cards
     addressCards.forEach((card, index) => {
        card.addEventListener('click', function(e) {
            // Only handle clicks on the card itself, not on buttons inside it
            if (e.target.closest('.address-select-btn')) {
                return; // Let the button handler handle this
            }
            
            updateAddressCardStyling(index);
            showAddressToast(index);
        });
    });
    
    addressSelectBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent triggering the card click
            const index = parseInt(this.dataset.index);
            updateAddressCardStyling(index);
            showAddressToast(index);
        });
    });
}

// Initialize item removal functionality
function initItemRemoval() {
    // Get remove item buttons
    const removeItemBtns = document.querySelectorAll('.remove-item-btn');
    
    // Add event listeners to remove buttons
    removeItemBtns.forEach(btn => {
        btn.addEventListener('click', async function() {
            const productId = this.dataset.productId;
            const itemElement = this.closest('.checkout-item');
            
            // Confirm removal
            if (confirm('Are you sure you want to remove this item from your cart?')) {
                // Remove item via AJAX
                const success = await removeItemAjax(productId);
                
                if (success) {
                    // Animate removal
                    itemElement.style.opacity = '0';
                    itemElement.style.height = '0';
                    itemElement.style.margin = '0';
                    itemElement.style.padding = '0';
                    itemElement.style.overflow = 'hidden';
                    itemElement.style.transition = 'all 0.5s ease';
                    
                    // Remove from DOM after animation
                    setTimeout(() => {
                        itemElement.remove();
                        
                        // Check if cart is empty
                        const remainingItems = document.querySelectorAll('.checkout-item');
                        if (remainingItems.length === 0) {
                            // Reload to show empty cart message
                            location.reload();
                        } else {
                            // Recalculate order summary
                            calculateOrderSummary();
                        }
                    }, 500);
                }
            }
        });
    });
}

// Global function to apply coupon (used by coupon cards)
window.applyCoupon = function(couponCode) {
    document.getElementById('coupon-code').value = couponCode;
    const couponManager = new CouponManager();
    couponManager.applyCoupon();
};

// Global function to remove coupon
window.removeCoupon = function() {
    const couponManager = new CouponManager();
    couponManager.removeCoupon();
};

// Add New Address Form Validation
function validateForm() {
    // Reset any previous error messages
    document.querySelectorAll('.error-message').forEach(el => el.remove());
    
    let isValid = true;
    
    // Validate Full Name (required, letters and spaces only)
    const fullName = document.getElementById('fullName');
    if (!fullName.value.trim()) {
        showError(fullName, 'Full name is required');
        isValid = false;
    } else if (!/^[A-Za-z\s]+$/.test(fullName.value.trim())) {
        showError(fullName, 'Full name should contain only letters and spaces');
        isValid = false;
    }
    
    // Validate Email (required, valid email format)
    const email = document.getElementById('email');
    if (!email.value.trim()) {
        showError(email, 'Email is required');
        isValid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email.value.trim())) {
        showError(email, 'Please enter a valid email address');
        isValid = false;
    }
    
    // Validate Mobile (required, numbers only, 10-15 digits)
    const mobile = document.getElementById('mobile');
    if (!mobile.value.trim()) {
        showError(mobile, 'Mobile number is required');
        isValid = false;
    } else if (!/^\d{10,15}$/.test(mobile.value.replace(/\D/g, ''))) {
        showError(mobile, 'Please enter a valid mobile number (10-15 digits)');
        isValid = false;
    }
    
    // Validate Country (required)
    const country = document.getElementById('country');
    if (!country.value.trim()) {
        showError(country, 'Country is required');
        isValid = false;
    }
    
    // Validate State (required)
    const state = document.getElementById('state');
    if (!state.value.trim()) {
        showError(state, 'State is required');
        isValid = false;
    }
    
    // Validate Address (required, min 5 characters)
    const address = document.getElementById('address');
    if (!address.value.trim()) {
        showError(address, 'Address is required');
        isValid = false;
    } else if (address.value.trim().length < 5) {
        showError(address, 'Address should be at least 5 characters');
        isValid = false;
    }
    
    // Validate Pincode (required, numbers only, 4-10 digits)
    const pincode = document.getElementById('pincode');
    if (!pincode.value.trim()) {
        showError(pincode, 'Pincode is required');
        isValid = false;
    } else if (!/^\d{4,10}$/.test(pincode.value.trim())) {
        showError(pincode, 'Please enter a valid pincode (4-10 digits)');
        isValid = false;
    }
    
    // Landmark is optional, no validation needed
    
    return isValid;
}

// Function to show error messages
function showError(inputElement, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message text-red-500 text-sm mt-1';
    errorDiv.innerText = message;
    
    // Insert error message after the input's parent div (which contains the icon + input)
    inputElement.parentElement.insertAdjacentElement('afterend', errorDiv);
    
    // Add error styling to input
    inputElement.classList.add('border-red-500', 'focus:ring-red-200');
}

// Handle new address form submission
document.getElementById('newAddressForm')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!validateForm()) {
        return;
    }
    
    try {
        // Collect form data
        const formData = {
            fullName: document.getElementById('fullName').value,
            email: document.getElementById('email').value,
            mobile: document.getElementById('mobile').value,
            country: document.getElementById('country').value,
            state: document.getElementById('state').value,
            address: document.getElementById('address').value,
            pincode: document.getElementById('pincode').value,
            landmark: document.getElementById('landmark').value,
            addressType: document.getElementById('addressType').value,
        };
        
        const userId = document.getElementById('userProfile')?.dataset?.id;  
        if (!userId) {
            showToast('User information not available', false);
            return;
        }
        
        const response = await fetch(`/addaddress/${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        if(result.success){
            localStorage.setItem('addressAdded', 'true');
            // Add the new address to the DOM
            setTimeout(() => {
                window.location.reload();
            }, 1000); 
        } else {
            showToast('Failed to add address: ' + (result.message || 'Unknown error'), false);
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Failed to add address', false);
    }
});

// Place Order button handler
document.getElementById('placeOrderBtn').addEventListener('click', async function() {
    // Validate address selection
    const addressElement = document.querySelector('input[name="address"]:checked');
    if (!addressElement) {
        // Show address warning
        const addressWarning = document.getElementById('address-warning');
        addressWarning.classList.add('show');
        
        // Scroll to address section
        const addressSection = document.querySelector('.address-card').closest('section');
        addressSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        
        showToast("Please select a delivery address", false);
        return;
    }
    
    // Validate payment method selection
    const paymentMethodElement = document.querySelector('input[name="payment"]:checked');
    if (!paymentMethodElement) {
        // Show payment warning
        const paymentWarning = document.getElementById('payment-warning');
        paymentWarning.classList.add('show');
        
        // Scroll to payment section
        const paymentSection = document.querySelector('.payment-card').closest('section');
        paymentSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        
        showToast("Please select a payment method", false);
        return;
    }

    const addressId = addressElement.value;
    const paymentMethod = paymentMethodElement.value;

    // Get all items from the cart
    const items = Array.from(document.querySelectorAll('.checkout-item')).map(item => {
        const productId = item.querySelector('input[id^="quantity-"]').id.replace('quantity-', '');
        const quantity = parseInt(item.querySelector('input[id^="quantity-"]').value);
        const priceText = item.querySelector('.text-sm.font-medium.text-gray-900, .text-sm.font-medium.text-green-600').textContent;
        const price = parseFloat(priceText.replace('₹', ''));
        
        return { product: productId, quantity, subTotal: quantity * price };
    });

    const totalText = document.querySelector('dd.text-base.font-bold').textContent;
    const totalAmount = parseFloat(totalText.replace('₹', ''));
    const couponCode = document.getElementById('coupon-code').value||""

    const orderData = {
        items,
        totalAmount,
        paymentMethod,
        paymentStatus: 'pending',
        address: addressId,
        couponCode
    };

    if (paymentMethod === 'razorpay') {
        initiateRazorpay(orderData);
    } else {
        processCODOrder(orderData);
    }
});

// Function to initiate Razorpay payment
async function initiateRazorpay(orderData) {
   
    try {
        const response = await fetch('/razorPay/createOrder',{
            method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderData)
        })

        const data = await response.json()

        if(!data.success||!data.order.id){
            showToast('failed to create razorpay order', false)
            return
        }

        const options = {
                    key: "<%=process.env.RAZORPAY_KEY_ID%>", // Replace with your actual Razorpay Key
                    amount: orderData.totalAmount * 100,
                    currency: 'INR',
                    name: 'CycloneX',
                    description: 'Order Payment',
                    order_id: data.order.id, 
                    handler: function(response) {
                        verifyRazorpayPayment(response, data.order.id);
                    },
                    prefill: {
                        name: 'User Name',
                        email: 'user@example.com',
                        contact: '9999999999'
                    },
                    theme: {
                        color: '#0ea5e9'
                    },
                    modal: {
                        ondismiss: function() {
                            // When user closes the modal, redirect to the failure page.
                            window.location.href = `/paymentfailure?orderId=${data.order.id}&error=Modal closed by user`;
                        }
                    }
                }
        const rzp = new Razorpay(options)
        rzp.on('payment.failed', function(response) {
                    console.error("❌ Payment Failed!", response);
                    showToast("Payment failed: " + response.error.description, false);
                    setTimeout(() => {
                        window.location.href = `/paymentfailure?orderId=${data.order.id}&error=${response.error.description}`;
                    }, 100);
                })
                rzp.open()
    } catch (error) {
        console.error("Razorpay initiation failed:", error);
                showToast("Error initiating Razorpay payment.", false)
    }
}

// Function to verify Razorpay Payment
async function verifyRazorpayPayment(response, orderId) {
    if (!response.razorpay_order_id || !response.razorpay_payment_id || !response.razorpay_signature) {
                console.error("❌ Missing Razorpay response values!", response);
                return;
            }
    try {
        const verifyResponse = await fetch('/razorPay/verifyPayment',{
            method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: orderId 
                    })
        })

        const data = await verifyResponse.json()
        if(data.success){
            showToast("Payment successful!...")
            setTimeout(() => { window.location.href = `/confirmation/${orderId}`; })
        }else{
            showToast("Payment verification faliled!...", false)
        }
    } catch (error) {
        console.error("Payment verification failed:", error);
        showToast("Error verifying payment.", false);
    }
}

// Function to process Cash on Delivery or post-Razorpay order
async function processCODOrder(orderData) {
    try {
     
        
        if(orderData.paymentMethod==="on"){
            orderData.paymentMethod="COD"
        }
        const response = await fetch('/orders/cod', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData)
        });
        const data = await response.json();
  
        
        if (data.success) {
           
            setTimeout(() => { window.location.href = `/confirmation/${data.order.orderId}`; });
        } else {
            showToast(data.message, false);
        }
    } catch (error) {
        showToast('Failed to place order', false);
    }
}
    </script>
</body>
</html>