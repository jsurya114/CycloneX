<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CycloneX - Create an account</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {"50":"#f0f9ff","100":"#e0f2fe","200":"#bae6fd","300":"#7dd3fc","400":"#38bdf8","500":"#0ea5e9","600":"#0284c7","700":"#0369a1","800":"#075985","900":"#0c4a6e","950":"#082f49"},
            secondary: '#f97316',
            dark: '#0f172a'
          },
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
          animation: {
            'float': 'float 6s ease-in-out infinite',
            'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
          },
          keyframes: {
            float: {
              '0%, 100%': { transform: 'translateY(0)' },
              '50%': { transform: 'translateY(-10px)' },
            }
          },
          backgroundImage: {
            'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
          }
        }
      }
    }
  </script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f8fafc;
    }
    
    .card-shadow {
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
    }
    
    .input-shadow:focus {
      box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.3);
    }
    
    .btn-shadow {
      box-shadow: 0 4px 6px -1px rgba(14, 165, 233, 0.2), 0 2px 4px -2px rgba(14, 165, 233, 0.2);
    }
    
    .btn-shadow:hover {
      box-shadow: 0 10px 15px -3px rgba(14, 165, 233, 0.3), 0 4px 6px -4px rgba(14, 165, 233, 0.2);
    }
    
    .social-btn-shadow {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .social-btn-shadow:hover {
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
    }
    
    /* Floating animation for decorative elements */
    @keyframes float {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-10px);
      }
    }
    
    .float-animation {
      animation: float 6s ease-in-out infinite;
    }
    
    .float-animation-delay {
      animation: float 6s ease-in-out 2s infinite;
    }
    
    /* Slide animation for the image slider */
    @keyframes slide {
      0% { opacity: 0; transform: translateX(-20px); }
      5% { opacity: 1; transform: translateX(0); }
      25% { opacity: 1; transform: translateX(0); }
      30% { opacity: 0; transform: translateX(20px); }
      100% { opacity: 0; transform: translateX(20px); }
    }
    
    .slide {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      transition: opacity 0.8s ease-in-out;
      background-size: cover;
      background-position: center;
    }
    
    .slide-1 {
      animation: slide 15s infinite;
      animation-delay: 0s;
      opacity: 1; /* Start with first slide visible */
    }
    
    .slide-2 {
      animation: slide 15s infinite;
      animation-delay: 5s;
    }
    
    .slide-3 {
      animation: slide 15s infinite;
      animation-delay: 10s;
    }
    
    .active-dot {
      width: 24px;
      border-radius: 4px;
    }
    
    /* OTP input focus styles */
    .otp-input:focus {
      box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.3);
    }
    
    /* Toast notification styles */
    @keyframes toast-in {
      0% { transform: translateY(20px); opacity: 0; }
      100% { transform: translateY(0); opacity: 1; }
    }
    
    @keyframes toast-out {
      0% { transform: translateY(0); opacity: 1; }
      100% { transform: translateY(20px); opacity: 0; }
    }
    
    @keyframes sonar-pulse {
      0% { transform: scale(0.8); opacity: 1; }
      70% { transform: scale(2); opacity: 0; }
      100% { transform: scale(2.5); opacity: 0; }
    }
    
    .toast-enter {
      animation: toast-in 0.3s ease forwards;
    }
    
    .toast-exit {
      animation: toast-out 0.3s ease forwards;
    }
    
    .sonar-pulse {
      animation: sonar-pulse 2s infinite;
    }
  </style>
</head>
<body class="min-h-screen w-full bg-slate-50 flex items-center justify-center p-4 md:p-6">
  <!-- Decorative elements -->
  <div class="absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none">
    <!-- Gradient circles -->
    <div class="absolute top-[15%] left-[10%] w-64 h-64 rounded-full bg-primary-200/30 blur-3xl opacity-30 float-animation"></div>
    <div class="absolute bottom-[20%] right-[15%] w-80 h-80 rounded-full bg-primary-100/30 blur-3xl opacity-30 float-animation-delay"></div>
    
    <!-- Small decorative dots -->
    <div class="hidden lg:block absolute top-[20%] right-[25%] w-2 h-2 rounded-full bg-primary-400"></div>
    <div class="hidden lg:block absolute top-[30%] right-[30%] w-1 h-1 rounded-full bg-primary-300"></div>
    <div class="hidden lg:block absolute top-[25%] right-[28%] w-1.5 h-1.5 rounded-full bg-primary-500"></div>
    <div class="hidden lg:block absolute bottom-[20%] left-[25%] w-2 h-2 rounded-full bg-primary-400"></div>
    <div class="hidden lg:block absolute bottom-[30%] left-[30%] w-1 h-1 rounded-full bg-primary-300"></div>
    <div class="hidden lg:block absolute bottom-[25%] left-[28%] w-1.5 h-1.5 rounded-full bg-primary-500"></div>
  </div>
  
  <!-- Main card container -->
  <div class="w-full max-w-5xl relative z-10">
    <div class="flex flex-col lg:flex-row rounded-2xl overflow-hidden card-shadow">
      <!-- Left side - Image slider section -->
      <div class="w-full lg:w-5/12 bg-slate-900 p-8 lg:p-12 flex flex-col justify-between relative overflow-hidden">
        <!-- Logo -->
        <div class="mb-8 lg:mb-0">
          <img src="<%= logoPath %>" alt="Cyclone" class="h-16 w-auto">
        </div>
        
        <!-- Image Slider -->
        <div class="relative h-64 w-full mb-6 overflow-hidden rounded-xl shadow-lg">
          <div class="slide slide-1 h-full w-full">
            <img src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Road_CY24.jpg-AmQUZkNFWkn96QuJDYW6sYp6FvZPEb.jpeg" alt="Road Cycling" class="w-full h-full object-cover object-center">
            <div class="absolute inset-0 bg-gradient-to-t from-primary-900/70 to-transparent"></div>
            <div class="absolute bottom-0 left-0 w-full p-6">
              <h3 class="text-xl font-bold text-white">Road Cycling</h3>
              <p class="text-white/90 text-sm">Explore open roads and scenic routes</p>
            </div>
          </div>
          
          <div class="slide slide-2 h-full w-full">
            <img src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Mountain_CY24.jpg-aalImhQdSd5296JrBiN8CYOgQ493j1.jpeg" alt="Mountain Biking" class="w-full h-full object-cover object-center">
            <div class="absolute inset-0 bg-gradient-to-t from-primary-900/70 to-transparent"></div>
            <div class="absolute bottom-0 left-0 w-full p-6">
              <h3 class="text-xl font-bold text-white">Mountain Biking</h3>
              <p class="text-white/90 text-sm">Conquer challenging trails</p>
            </div>
          </div>
          
          <div class="slide slide-3 h-full w-full">
            <img src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Gravel_CY25.jpg-gCUqzrdh1ycyr9q1r6m8Gjr2TbyWMU.jpeg" alt="Gravel Riding" class="w-full h-full object-cover object-center">
            <div class="absolute inset-0 bg-gradient-to-t from-primary-900/70 to-transparent"></div>
            <div class="absolute bottom-0 left-0 w-full p-6">
              <h3 class="text-xl font-bold text-white">Gravel Riding</h3>
              <p class="text-white/90 text-sm">The perfect mix of road and off-road</p>
            </div>
          </div>
        </div>
        
        <!-- Slider dots -->
        <div class="flex justify-center gap-2 mb-6">
          <div class="h-2 w-6 bg-primary-500 rounded-md active-dot"></div>
          <div class="h-2 w-2 bg-primary-300 rounded-full"></div>
          <div class="h-2 w-2 bg-primary-300 rounded-full"></div>
        </div>
        
        <!-- Content -->
        <div class="relative z-10">
          <h2 class="text-2xl font-bold text-white mb-4">Join Our Community</h2>
          <p class="text-slate-300 mb-6">Create an account to access exclusive features, save your preferences, and connect with other members.</p>
          
          <!-- Features list -->
          <div class="space-y-3">
            <div class="flex items-center text-slate-300">
              <div class="w-6 h-6 rounded-full bg-primary-900/50 flex items-center justify-center mr-3 text-primary-400">
                <i class="fas fa-check text-xs"></i>
              </div>
              <span>Personalized experience</span>
            </div>
            <div class="flex items-center text-slate-300">
              <div class="w-6 h-6 rounded-full bg-primary-900/50 flex items-center justify-center mr-3 text-primary-400">
                <i class="fas fa-check text-xs"></i>
              </div>
              <span>Save your favorite content</span>
            </div>
            <div class="flex items-center text-slate-300">
              <div class="w-6 h-6 rounded-full bg-primary-900/50 flex items-center justify-center mr-3 text-primary-400">
                <i class="fas fa-check text-xs"></i>
              </div>
              <span>Connect with like-minded people</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Right side - Signup form -->
      <div class="w-full lg:w-7/12 bg-white p-8 lg:p-12 flex items-center">
        <div class="w-full max-w-md mx-auto">
          <!-- Form heading -->
          <div class="text-center lg:text-left mb-8">
            <h1 class="text-3xl font-bold text-slate-800 mb-2">Create Account</h1>
            <p class="text-slate-500">
              Already have an account? <a href="/" class="text-primary-600 hover:text-primary-700 font-medium">Log in</a>
            </p>
          </div>
          
          <!-- Social Signup -->
          <a 
            href="/auth/google/callback" 
            class="flex items-center justify-center gap-2 py-3 px-6 border border-slate-300 rounded-lg hover:bg-slate-50 transition-all duration-200 w-full mb-6 social-btn-shadow"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
              <path d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z" fill="#EA4335"/>
            </svg>
            <span class="text-slate-700 font-medium">Sign up with Google</span>
          </a>
          
          <!-- Or signup with -->
          <div class="mt-4 mb-6 flex items-center">
            <div class="flex-grow h-px bg-slate-200"></div>
            <span class="mx-4 text-sm text-slate-500">Or sign up with email</span>
            <div class="flex-grow h-px bg-slate-200"></div>
          </div>
          
          <!-- Signup Form -->
          <form id="signupForm" class="space-y-4">
            <!-- Full Name input -->
            <div>
              <label for="fullname" class="block text-sm font-medium text-slate-700 mb-1.5">Full Name</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-user text-slate-400"></i>
                </div>
                <input 
                  type="text" 
                  name="fullname" 
                  id="fullname"
                  class="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="Enter your Name"
                >
              </div>
              <span id="error-name" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Email input -->
            <div>
              <label for="email" class="block text-sm font-medium text-slate-700 mb-1.5">Email Address</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-envelope text-slate-400"></i>
                </div>
                <input 
                  type="email" 
                  name="email" 
                  id="email"
                  class="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="email@gmail.com"
                >
              </div>
              <span id="error-email" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Phone input -->
            <div>
              <label for="phone" class="block text-sm font-medium text-slate-700 mb-1.5">Phone Number</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-phone text-slate-400"></i>
                </div>
                <input 
                  type="tel" 
                  name="phone" 
                  id="phone"
                  class="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="+91 123456789"
                >
              </div>
              <span id="error-phone" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Password input -->
            <div>
              <label for="passwordInput" class="block text-sm font-medium text-slate-700 mb-1.5">Password</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-lock text-slate-400"></i>
                </div>
                <input 
                  type="password" 
                  name="password" 
                  id="passwordInput" 
                  class="w-full pl-10 pr-10 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="••••••••"
                >
                <button 
                  type="button" 
                  id="togglePassword" 
                  class="absolute inset-y-0 right-0 flex items-center pr-3 text-slate-400 hover:text-slate-600 transition-colors"
                >
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <span id="error-password" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Confirm Password input -->
            <div>
              <label for="confirmPasswordInput" class="block text-sm font-medium text-slate-700 mb-1.5">Confirm Password</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-lock text-slate-400"></i>
                </div>
                <input 
                  type="password" 
                  name="confirm_password" 
                  id="confirmPasswordInput" 
                  class="w-full pl-10 pr-10 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="••••••••"
                >
                <button 
                  type="button" 
                  id="toggleConfirmPassword" 
                  class="absolute inset-y-0 right-0 flex items-center pr-3 text-slate-400 hover:text-slate-600 transition-colors"
                >
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <span id="error-confirm_password" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Referral Code input -->
            <div>
              <label for="refferInput" class="block text-sm font-medium text-slate-700 mb-1.5">Referral Code (Optional)</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3.5 flex items-center pointer-events-none">
                  <i class="fas fa-user-plus text-slate-400"></i>
                </div>
                <input 
                  type="text" 
                  name="refferalCode" 
                  id="refferInput" 
                  class="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg text-slate-800 placeholder-slate-400 bg-white focus:outline-none focus:border-primary-500 focus:ring-0 input-shadow transition-all" 
                  placeholder="Enter referral code"
                >
              </div>
              <span id="error-referral" class="text-red-500 text-sm mt-1 block"></span>
            </div>
            
            <!-- Terms and conditions checkbox -->
            <div class="flex items-start mt-4">
              <div class="flex items-center h-5">
                <input 
                  type="checkbox" 
                  id="terms" 
                  class="w-4 h-4 text-primary-600 bg-white border-slate-300 rounded focus:ring-primary-500"
                >
              </div>
              <label for="terms" class="ml-2 text-sm text-slate-600">
                I agree to the <a href="#" class="text-primary-600 hover:text-primary-700">Terms of Service</a> and <a href="#" class="text-primary-600 hover:text-primary-700">Privacy Policy</a>
              </label>
            </div>
            
            <!-- Signup button -->
            <button 
              type="button" 
              id="signupButton" 
              class="w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg transition-all duration-200 font-medium flex items-center justify-center btn-shadow mt-6"
            >
              <span>Create Account</span>
              <i class="fas fa-arrow-right ml-2"></i>
            </button>
          </form>
          
          <!-- Security note -->
          <p class="text-xs text-slate-500 text-center mt-8">
            <i class="fas fa-shield-alt mr-1"></i> 
            Your data is protected with industry-standard encryption
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- OTP Verification Modal -->
  <div id="otpModal" class="fixed inset-0 bg-black/70 backdrop-blur-sm overflow-y-auto h-full w-full hidden z-50 flex items-center justify-center">
    <div class="bg-white p-8 rounded-xl shadow-2xl w-[400px] transform transition-all">
      <div class="text-center mb-6">
        <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary-100 text-primary-600 mb-4">
          <i class="fas fa-envelope-open-text text-2xl"></i>
        </div>
        <h3 class="text-xl font-bold text-slate-800 mb-2">Verify Your Email</h3>
        <p class="text-slate-500 mb-2">
          Enter the 6-digit code sent to your email
        </p>
      </div>
      
      <div class="flex justify-center space-x-3 mb-6">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
        <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold bg-white border border-slate-300 text-slate-800 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all otp-input">
      </div>
      
      <div class="flex justify-between items-center mb-6">
        <button id="resendOtpButton" class="text-primary-600 hover:text-primary-700 font-medium hover:underline transition-all">
          Resend Code
        </button>
        <span id="otpTimer" class="text-slate-500 font-medium"></span>
      </div>

      <button id="verifyOtpButton" class="w-full py-3 bg-primary-600 text-white font-medium rounded-lg hover:bg-primary-700 transition-all duration-200 btn-shadow">
        Verify Email
      </button>
    </div>
  </div>

  <!-- Toast Notification Container -->
  <div id="toastContainer" class="fixed bottom-4 right-4 z-50 flex flex-col gap-3 items-end"></div>

  <script>
    // Preload images to prevent flashing
    window.addEventListener('load', function() {
      const images = [
        'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Road_CY24.jpg-AmQUZkNFWkn96QuJDYW6sYp6FvZPEb.jpeg',
        'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Mountain_CY24.jpg-aalImhQdSd5296JrBiN8CYOgQ493j1.jpeg',
        'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/cat_Gravel_CY25.jpg-gCUqzrdh1ycyr9q1r6m8Gjr2TbyWMU.jpeg'
      ];
      
      images.forEach(src => {
        const img = new Image();
        img.src = src;
      });
    });

    // Toast notification function
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toastContainer');
      
      // Create toast element
      const toast = document.createElement('div');
      toast.className = 'toast-enter flex items-center gap-3 p-4 rounded-lg shadow-lg max-w-xs';
      
      // Set background color based on type
      if (type === 'success') {
        toast.classList.add('bg-green-50', 'border-l-4', 'border-green-500');
      } else if (type === 'error') {
        toast.classList.add('bg-red-50', 'border-l-4', 'border-red-500');
      } else if (type === 'warning') {
        toast.classList.add('bg-yellow-50', 'border-l-4', 'border-yellow-500');
      }
      
      // Create sonar pulse effect for icon container
      const iconContainer = document.createElement('div');
      iconContainer.className = 'relative flex items-center justify-center';
      
      // Create the sonar pulse effect
      const sonarRing = document.createElement('span');
      sonarRing.className = 'absolute w-full h-full rounded-full sonar-pulse';
      
      // Create icon based on type
      const icon = document.createElement('i');
      if (type === 'success') {
        icon.className = 'fas fa-check text-green-500 z-10 text-sm';
        sonarRing.classList.add('bg-green-500/30');
      } else if (type === 'error') {
        icon.className = 'fas fa-times text-red-500 z-10 text-sm';
        sonarRing.classList.add('bg-red-500/30');
      } else if (type === 'warning') {
        icon.className = 'fas fa-exclamation text-yellow-500 z-10 text-sm';
        sonarRing.classList.add('bg-yellow-500/30');
      }
      
      // Create icon background
      const iconBg = document.createElement('div');
      iconBg.className = 'w-8 h-8 rounded-full flex items-center justify-center z-10';
      if (type === 'success') {
        iconBg.classList.add('bg-green-100');
      } else if (type === 'error') {
        iconBg.classList.add('bg-red-100');
      } else if (type === 'warning') {
        iconBg.classList.add('bg-yellow-100');
      }
      
      // Assemble icon components
      iconBg.appendChild(icon);
      iconContainer.appendChild(sonarRing);
      iconContainer.appendChild(iconBg);
      
      // Create message element
      const messageElement = document.createElement('div');
      messageElement.className = 'text-sm font-medium';
      if (type === 'success') {
        messageElement.classList.add('text-green-800');
      } else if (type === 'error') {
        messageElement.classList.add('text-red-800');
      } else if (type === 'warning') {
        messageElement.classList.add('text-yellow-800');
      }
      messageElement.textContent = message;
      
      // Assemble toast
      toast.appendChild(iconContainer);
      toast.appendChild(messageElement);
      
      // Add close button
      const closeButton = document.createElement('button');
      closeButton.className = 'ml-auto text-slate-400 hover:text-slate-600';
      closeButton.innerHTML = '<i class="fas fa-times"></i>';
      closeButton.onclick = () => {
        toast.classList.remove('toast-enter');
        toast.classList.add('toast-exit');
        setTimeout(() => {
          if (toast.parentNode === toastContainer) {
            toastContainer.removeChild(toast);
          }
        }, 300);
      };
      toast.appendChild(closeButton);
      
      // Add toast to container
      toastContainer.appendChild(toast);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        if (toast.parentNode === toastContainer) {
          toast.classList.remove('toast-enter');
          toast.classList.add('toast-exit');
          setTimeout(() => {
            if (toast.parentNode === toastContainer) {
              toastContainer.removeChild(toast);
            }
          }, 300);
        }
      }, 3000);
      
      // Return the toast element in case it's needed
      return toast;
    }

    // Slider animation for dots
    const slides = document.querySelectorAll('.slide');
    const dots = document.querySelectorAll('.gap-2 > div');
    let currentSlide = 0;
    
    setInterval(() => {
      // Update dot indicators
      dots.forEach(dot => {
        dot.classList.remove('active-dot');
        dot.classList.add('rounded-full');
        dot.classList.remove('rounded-md');
        dot.classList.add('bg-primary-300');
        dot.classList.remove('bg-primary-500');
        dot.style.width = '8px';
      });
      
      // Move to next slide
      currentSlide = (currentSlide + 1) % 3;
      
      // Update active dot
      dots[currentSlide].classList.add('active-dot');
      dots[currentSlide].classList.remove('rounded-full');
      dots[currentSlide].classList.add('rounded-md');
      dots[currentSlide].classList.remove('bg-primary-300');
      dots[currentSlide].classList.add('bg-primary-500');
      dots[currentSlide].style.width = '24px';
    }, 5000);

    // Password toggle functionality
    document.getElementById('togglePassword').addEventListener('click', function() {
      const passwordInput = document.getElementById('passwordInput');
      const toggleIcon = this.querySelector('i');
      
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
      } else {
        passwordInput.type = 'password';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
      }
    });
    
    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
      const confirmPasswordInput = document.getElementById('confirmPasswordInput');
      const toggleIcon = this.querySelector('i');
      
      if (confirmPasswordInput.type === 'password') {
        confirmPasswordInput.type = 'text';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
      } else {
        confirmPasswordInput.type = 'password';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
      }
    });

    // Form submission
    document.getElementById('signupForm').addEventListener('submit', function(e) {
      e.preventDefault();
    });
    
    document.addEventListener('DOMContentLoaded', function() {
      const signupButton = document.getElementById('signupButton');
      const otpModal = document.getElementById('otpModal');
      const verifyOtpButton = document.getElementById('verifyOtpButton');
      const resendOtpButton = document.getElementById('resendOtpButton');
      const otpTimer = document.getElementById('otpTimer');
      const otpInputs = document.querySelectorAll('.otp-input');
      
      signupButton.addEventListener('click', async function(event) {
        event.preventDefault();
        
        // Clear any inline error messages
        document.getElementById('error-name').textContent = "";
        document.getElementById('error-email').textContent = "";
        document.getElementById('error-phone').textContent = "";
        document.getElementById('error-password').textContent = "";
        document.getElementById('error-confirm_password').textContent = "";
        
        // Gather form data
        const formData = {
          fullname: document.querySelector('input[name="fullname"]').value,
          email: document.querySelector('input[name="email"]').value,
          phone: document.querySelector('input[name="phone"]').value,
          password: document.querySelector('input[name="password"]').value,
          confirm_password: document.querySelector('input[name="confirm_password"]').value,
          refferalCode: document.querySelector('input[name="refferalCode"]').value
        };
        
        // Basic client-side check: all fields required
        let hasError = false;
        if (!formData.fullname || formData.fullname.trim() === "") {
          document.getElementById('error-name').textContent = "Full name is required";
          hasError = true;
        }
        if (!formData.email || formData.email.trim() === "") {
          document.getElementById('error-email').textContent = "Email is required";
          hasError = true;
        }
        if (!formData.phone || formData.phone.trim() === "") {
          document.getElementById('error-phone').textContent = "Phone number is required";
          hasError = true;
        }
        if (!formData.password || formData.password.trim() === "") {
          document.getElementById('error-password').textContent = "Password is required";
          hasError = true;
        }
        if (!formData.confirm_password || formData.confirm_password.trim() === "") {
          document.getElementById('error-confirm_password').textContent = "Confirm password is required";
          hasError = true;
        }
        if (hasError) return;
        
        // Also check if passwords match (client-side check)
        if (formData.password !== formData.confirm_password) {
          document.getElementById('error-confirm_password').textContent = "Passwords do not match";
          return;
        }
        
        // Check terms checkbox
        if (!document.getElementById('terms').checked) {
          showToast("Please agree to the Terms of Service and Privacy Policy", "warning");
          return;
        }
        
        // Show loading state on button
        const originalBtnText = signupButton.innerHTML;
        signupButton.innerHTML = '<i class="fas fa-circle-notch fa-spin mr-2"></i> Creating account...';
        signupButton.disabled = true;
        
        // Store email in localStorage for later use (e.g. OTP verification)
        const userEmail = formData.email;
        localStorage.setItem('userEmail', userEmail);
        
        try {
          const response = await fetch('/signup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });
          const result = await response.json();
          
          // Reset button state
          signupButton.innerHTML = originalBtnText;
          signupButton.disabled = false;
          
          if (response.ok) {
            otpModal.classList.remove('hidden');
            startOtpTimer();
          } else {
            // Based on the error message from the backend, update inline errors
            const msg = result.message.toLowerCase();
            if (msg.includes("fullname")) {
              document.getElementById('error-name').textContent = result.message;
            } else if (msg.includes("email")) {
              document.getElementById('error-email').textContent = result.message;
            } else if (msg.includes("phone")) {
              document.getElementById('error-phone').textContent = result.message;
            } else if (msg.includes("confirm")) {
              document.getElementById('error-confirm_password').textContent = result.message;
            } else if (msg.includes("password")) {
              document.getElementById('error-password').textContent = result.message;
            } else {
              // If no specific field is detected, assign the error to the full name field
              document.getElementById('error-name').textContent = result.message;
            }
          }
        } catch (error) {
          console.error('Signup Error:', error);
          document.getElementById('error-name').textContent = "An error occurred. Please try again.";
          
          // Reset button state
          signupButton.innerHTML = originalBtnText;
          signupButton.disabled = false;
        }
      });
      
      verifyOtpButton.addEventListener('click', async function() {
        const otp = Array.from(otpInputs).map(input => input.value).join('');
        const userEmail = localStorage.getItem("userEmail");
        
        // Show loading state
        const originalBtnText = verifyOtpButton.innerHTML;
        verifyOtpButton.innerHTML = '<i class="fas fa-circle-notch fa-spin mr-2"></i> Verifying...';
        verifyOtpButton.disabled = true;
        
        try {
          const response = await fetch('/verify-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: userEmail, otp })
          });
          const result = await response.json();
          
          // Reset button state
          verifyOtpButton.innerHTML = originalBtnText;
          verifyOtpButton.disabled = false;
          
          if (response.ok) {
            otpModal.classList.add('hidden');
            showToast(result.message, "success");
            setTimeout(() => {
              window.location.href = '/';
            }, 2000);
          } else {
            showToast(result.message, "error");
          }
        } catch (error) {
          console.error('OTP Verification Error:', error);
          
          // Reset button state
          verifyOtpButton.innerHTML = originalBtnText;
          verifyOtpButton.disabled = false;
          
          showToast("Error verifying OTP.", "error");
        }
      });
      
      resendOtpButton.addEventListener('click', async function() {
        // Show loading state
        const originalBtnText = resendOtpButton.innerHTML;
        resendOtpButton.innerHTML = '<i class="fas fa-circle-notch fa-spin mr-2"></i> Sending...';
        resendOtpButton.disabled = true;
        
        try {
          const response = await fetch('/resend-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: localStorage.getItem("userEmail") })
          });
          const result = await response.json();
          
          // Reset button state
          resendOtpButton.innerHTML = originalBtnText;
          resendOtpButton.disabled = true; // Keep disabled until timer completes
          
          if (response.ok) {
            showToast(result.message, "success");
            otpInputs.forEach(input => input.value = '');
            startOtpTimer(); 
          } else {
            showToast(result.message, "error");
            resendOtpButton.disabled = false;
          }
        } catch (error) {
          console.error('Resend OTP Error:', error);
          
          // Reset button state
          resendOtpButton.innerHTML = originalBtnText;
          resendOtpButton.disabled = false;
          
          showToast("Error resending OTP. Please try again.", "error");
        }
      });
      
      function startOtpTimer() {
        let timeLeft = 60;
        resendOtpButton.disabled = true;
        const countdown = setInterval(() => {
          const minutes = Math.floor(timeLeft / 60);
          const seconds = timeLeft % 60;
          otpTimer.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
          if (timeLeft <= 0) {
            clearInterval(countdown);
            otpTimer.textContent = 'OTP Expired';
            resendOtpButton.disabled = false;
          } else {
            timeLeft--;
          }
        }, 1000);
      }
      
      // Autofocus handling for OTP inputs
      otpInputs.forEach((input, index) => {
        input.addEventListener('input', (event) => {
          if (event.target.value.length === 1 && index < otpInputs.length - 1) {
            otpInputs[index + 1].focus();
          }
        });
        input.addEventListener('keydown', (event) => {
          if (event.key === 'Backspace' && index > 0 && !event.target.value) {
            otpInputs[index - 1].focus();
          }
        });
      });
    });
  </script>
</body>
</html>