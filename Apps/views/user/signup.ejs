<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="shortcut icon" type="image/x-icon" href="/frontend/imgs/logos/cyclonelogo.png">
    <link href="/frontend/css/main.css" rel="stylesheet" type="text/css" />
</head>
<body class="min-h-screen bg-gray-100">
    <!-- Background Image - Bicycle Image -->
    <div class="fixed inset-0 -z-10 bg-gray-100">
        <div class="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200"></div>
    </div>

    <!-- Main Content -->
    <div class="min-h-screen flex flex-col">
        <!-- Signup Section -->
        <main class="flex-1 flex items-center justify-center p-4">
            <div class="bg-white w-full max-w-4xl rounded-xl shadow-lg overflow-hidden border border-gray-200">
                <!-- Two-column layout -->
                <div class="flex flex-col md:flex-row">
                    <!-- Left column - Bicycle Image -->
                    <div class="hidden md:block md:w-1/2 relative">
                        <img src="/frontend/imgs/logos/sign.jpg" alt="Bicycle" class="w-full h-full object-cover">
                        <div class="absolute inset-0 bg-black/30"></div>
                    </div>
                    
                    <!-- Right column - Signup Form -->
                    <div class="w-full md:w-1/2 p-8 bg-white">
                        <!-- Logo -->
                        <div class="flex items-center mb-8">
                            <img src="<%= logoPath %>" alt="Cyclone" class="h-30 w-30">
                            <div class="ml-2">
                            </div>
                        </div>
                        
                        <h2 class="text-xl font-bold text-gray-800 mb-6">Create Account</h2>
                        
                        <!-- Social Signup -->
                        <div class="flex gap-3 mb-6">
                            <a href="/auth/google/callback" 
                                class="flex-1 py-2 flex items-center justify-center rounded border border-gray-300 text-sm font-medium
                                hover:bg-gray-50 transition-colors">
                                <img src="https://cdn.cdnlogo.com/logos/g/35/google-icon.svg" alt="Google" class="w-5 h-5 mr-2">
                                Sign up with Google
                            </a>
                          
                        </div>
                        
                        <!-- Divider -->
                        <div class="relative flex items-center mb-6">
                            <div class="flex-grow border-t border-gray-300"></div>
                            <span class="flex-shrink mx-3 text-gray-500 text-sm">OR</span>
                            <div class="flex-grow border-t border-gray-300"></div>
                        </div>
                        
                        <!-- Signup Form -->
                        <form id="signupForm" class="space-y-4" onsubmit="return false;">
                            <div>
                                <input type="text" name="fullname" placeholder="Full Name" 
                                    class="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm">
                                    <span id="error-name" class="text-red-500 text-sm"></span>
                            </div>
                            
                            <div>
                                <input type="email" name="email" placeholder="Email Address" 
                                    class="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm">
                                    <span id="error-email" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <input type="tel" name="phone" placeholder="Phone Number" 
                                   class="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm">
                                   <span id="error-phone" class="text-red-500 text-sm"></span>
                                </div>
                           
                            
                            <div class="relative">
                                <input type="password" name="password" placeholder="Password" 
                                    class="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm">
                                    <span id="error-password" class="text-red-500 text-sm"></span>
                                <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                                    <i class="fas fa-eye-slash"></i>
                                </button>
                            </div>
                            
                            <div class="relative">
                                <input type="password" name="confirm_password" placeholder="Confirm Password" 
                                    class="w-full px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm">
                                    <span id="error-confirm_password" class="text-red-500 text-sm"></span>
                                    <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                                    <i class="fas fa-eye-slash"></i>
                                </button>
                            </div>
                            
                            <div>
                                <button type="button" id="signupButton" 
                                    class="w-full py-2 bg-blue-600 text-white font-medium rounded hover:bg-blue-700 transition-colors">
                                    Create Account
                                </button>
                            </div>
                        </form>
                        
                        <!-- Login Link -->
                        <div class="mt-6 text-center text-sm">
                            Already have an account? <a href="/" class="text-blue-600 hover:underline">Log in</a>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- OTP Verification Modal -->
    <div id="otpModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm overflow-y-auto h-full w-full hidden z-50 flex items-center justify-center">
        <div class="bg-white p-8 rounded-xl shadow-2xl w-[400px] transform transition-all">
            <h3 class="text-xl font-bold mb-2 text-center text-gray-800">Verify Your Email</h3>
            <p class="text-gray-600 mb-6 text-center">
                Enter the 6-digit code sent to your email
            </p>
            
            <div class="flex justify-center space-x-3 mb-6">
                <input type="text"  maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
                <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
                <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
                <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
                <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
                <input type="text" maxlength="1" class="w-10 h-12 text-center text-xl font-bold border-2 rounded focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-all otp-input">
            </div>
            
            <div class="flex justify-between items-center mb-6">
                <button id="resendOtpButton" class="text-blue-600 hover:text-blue-700 font-medium hover:underline transition-all">
                    Resend Code
                </button>
                <span id="otpTimer" class="text-gray-600 font-medium"></span>
            </div>

            <button id="verifyOtpButton" class="w-full py-3 bg-blue-600 
                text-white font-medium rounded hover:bg-blue-700
                transition-all duration-200">
                Verify Email
            </button>
        </div>

    </div>
    
      <%- include('partials/footer')%>  
</body>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.getElementById('signupForm').addEventListener('submit', async function(e) {
          e.preventDefault();
          // Clear any previous error messages in the form
          document.querySelectorAll('.text-red-500').forEach(el => el.textContent = "");
        });
        
        document.addEventListener('DOMContentLoaded', function() {
          const signupButton = document.getElementById('signupButton');
          const otpModal = document.getElementById('otpModal');
          const verifyOtpButton = document.getElementById('verifyOtpButton');
          const resendOtpButton = document.getElementById('resendOtpButton');
          const otpTimer = document.getElementById('otpTimer');
          const otpInputs = document.querySelectorAll('.otp-input');
        
          signupButton.addEventListener('click', async function(event) {
            event.preventDefault();
        
            // Clear any inline error messages
            document.getElementById('error-name').textContent = "";
            document.getElementById('error-email').textContent = "";
            document.getElementById('error-phone').textContent = "";
            document.getElementById('error-password').textContent = "";
            document.getElementById('error-confirm_password').textContent = "";
        
            // Gather form data
            const formData = {
              fullname: document.querySelector('input[name="fullname"]').value,
              email: document.querySelector('input[name="email"]').value,
              phone: document.querySelector('input[name="phone"]').value, // using actual phone field
              password: document.querySelector('input[name="password"]').value,
              confirm_password: document.querySelector('input[name="confirm_password"]').value
            };
        
            // Basic client-side check: all fields required
            let hasError = false;
            if (!formData.fullname || formData.fullname.trim() === "") {
              document.getElementById('error-name').textContent = "Full name is required";
              hasError = true;
            }
            if (!formData.email || formData.email.trim() === "") {
              document.getElementById('error-email').textContent = "Email is required";
              hasError = true;
            }
            if (!formData.phone || formData.phone.trim() === "") {
              document.getElementById('error-phone').textContent = "Phone number is required";
              hasError = true;
            }
            if (!formData.password || formData.password.trim() === "") {
              document.getElementById('error-password').textContent = "Password is required";
              hasError = true;
            }
            if (!formData.confirm_password || formData.confirm_password.trim() === "") {
              document.getElementById('error-confirm_password').textContent = "Confirm password is required";
              hasError = true;
            }
            if (hasError) return;
        
            // Also check if passwords match (client-side check)
            if (formData.password !== formData.confirm_password) {
              document.getElementById('error-confirm_password').textContent = "Passwords do not match";
              return;
            }
        
            // Store email in localStorage for later use (e.g. OTP verification)
            const userEmail = formData.email;
            localStorage.setItem('userEmail', userEmail);
        
            try {
              const response = await fetch('/signup', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
              });
              const result = await response.json();
              if (response.ok) {
                otpModal.classList.remove('hidden');
                startOtpTimer();
              } else {
                // Based on the error message from the backend, update inline errors
                const msg = result.message.toLowerCase();
                if (msg.includes("fullname")) {
                  document.getElementById('error-name').textContent = result.message;
                } else if (msg.includes("email")) {
                  document.getElementById('error-email').textContent = result.message;
                } else if (msg.includes("phone")) {
                  document.getElementById('error-phone').textContent = result.message;
                } else if (msg.includes("confirm")) {
                  document.getElementById('error-confirm_password').textContent = result.message;
                } else if (msg.includes("password")) {
                  document.getElementById('error-password').textContent = result.message;
                } else {
                  // If no specific field is detected, assign the error to the full name field (or add a general error element)
                  document.getElementById('error-name').textContent = result.message;
                }
              }
            } catch (error) {
              console.error('Signup Error:', error);
              // Optionally update a general error field if available
              document.getElementById('error-name').textContent = "An error occurred. Please try again.";
            }
          });
        
          verifyOtpButton.addEventListener('click', async function() {
    const otp = Array.from(otpInputs).map(input => input.value).join('');
    const userEmail = localStorage.getItem("userEmail");

    try {
        const response = await fetch('/verify-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: userEmail, otp })
        });
        const result = await response.json();
        if (response.ok) {
            otpModal.classList.add('hidden');
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: result.message,
                showConfirmButton: false,
                timer: 1500,
                width: '300px'
            }).then(() => {
                window.location.href = '/';
            });
        } else {
            Swal.fire({
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 1500,
                width: '300px'
            });
        }
    } catch (error) {
        console.error('OTP Verification Error:', error);
        Swal.fire({
            position: 'top-end',
            icon: 'error',
            title: 'Error verifying OTP.',
            showConfirmButton: false,
            timer: 1500,
            width: '300px'
        });
    }
});
resendOtpButton.addEventListener('click', async function() {
    try {
        const response = await fetch('/resend-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: localStorage.getItem("userEmail") })
        });
        const result = await response.json();
        if (response.ok) {
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: result.message,
                showConfirmButton: false,
                timer: 1500,
                width: '300px'
            });
            otpInputs.forEach(input => input.value = '');
            startOtpTimer(); 
        } else {
            Swal.fire({
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 1500,
                width: '300px'
            });
        }
    } catch (error) {
        console.error('Resend OTP Error:', error);
        Swal.fire({
            position: 'top-end',
            icon: 'error',
            title: 'Error resending OTP. Please try again.',
            showConfirmButton: false,
            timer: 1500,
            width: '300px'
        });
    }
});

          function startOtpTimer() {
            let timeLeft = 60;
            resendOtpButton.disabled = true;
            const countdown = setInterval(() => {
              const minutes = Math.floor(timeLeft / 60);
              const seconds = timeLeft % 60;
              otpTimer.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
              if (timeLeft <= 0) {
                clearInterval(countdown);
                otpTimer.textContent = 'OTP Expired';
                resendOtpButton.disabled = false;
              } else {
                timeLeft--;
              }
            }, 1000);
          }
        
          // Autofocus handling for OTP inputs
          otpInputs.forEach((input, index) => {
            input.addEventListener('input', (event) => {
              if (event.target.value.length === 1 && index < otpInputs.length - 1) {
                otpInputs[index + 1].focus();
              }
            });
            input.addEventListener('keydown', (event) => {
              if (event.key === 'Backspace' && index > 0 && !event.target.value) {
                otpInputs[index - 1].focus();
              }
            });
          });
        });
        </script>
</html>